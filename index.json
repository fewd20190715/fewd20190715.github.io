[
{
	"uri": "/21-class-resources/homework-submission-github-workflow/",
	"title": "Github HW Submission Instructions",
	"tags": [],
	"description": "",
	"content": " Before you start Step 1: Ensure you have a github folder Ensure that you have a folder named gitHub in the FEWD folder . You will be using this folder to manage all of your work that lives in Github through the course. This folder only needs to be created once.\nStep 2: Log into to your Github account Ensure you are logged into your GitHub account on Github.com\nStep 3: Log into your Github Desktop application Ensure You have installed the Github Desktop Application on your computer and you have logged in the application using your GitHub username and password\nForking the Assignment Repository Step 4: Navigate to the HW Repository on Github.com The instructor will provide you with a link to the repository that houses the HW assignment on Github.com. Click on that link and you should be navigated to the repository page for the assignment located on Github.com.\nStep 5: Fork the HW Repository to create a copy under your account Next we will fork the repository that contains the homework assignment. Remember, forking a repository copies a repository and places it under your account.\nFork the repository by pressing the Fork button in the upper right hand corner:\nIf you have more than one Github account associated with your email address, you will be asked to pick one. I recommended that you select the account associated with your personal account (this is most likely listed first in the list).\n Step 6: Confirm fork was successful Confirm that the fork was successful by observing that a copy of the repository has been placed under your account.\nIn the example above, the github account named kareemgrant successfully forked (i.e. copied) the HW assignment repository (sample-hw-assignment) that is owned by an account named fewd20190715\nCloning the forked repository Congrats! You have forked the HW assignment repository to your account. However, you\u0026rsquo;re still not able to work on it, since the forked repository lives in the cloud on Github (another way to say this is that your repository is a remote repository) and you need a copy of the repository on your computer so you can work on it.\n The process of creating a local copy (i.e. on your computer) of a remote repository is called cloning. Cloning also allows both local and remote copies of a repository to stay in sync.\n We\u0026rsquo;ll be using the Github Desktop Application to clone our remote repositories. Make sure you have Github Desktop open on your computer. Also make sure you are signed in.\n  Step 7: Clone the forked repository Clone the repository by pressing on the button labeled Clone or download and then press the button labeled Open in Desktop. This action will open the Github Desktop application located on your computer.\nStep 8: Place the cloned repo into your FEWD/github folder While in Github Desktop navigate to your github folder located inside your FEWD folder (see Step 1)\nStep 9: Confirm clone was successfully placed in your FEWD/github folder On your computer, navigate to your FEWD/github folder and confirm the existences of a folder that has name that matches the name of your remote repository\nWorking on your assignment If you\u0026rsquo;ve made it this far you have successfully cloned your assignment repository and now you\u0026rsquo;re ready to start coding! Going forward, all of your work on this particular assignment will live in your FEWD/github/{name-of-your-assignment-repository} folder\nStep 10: Open the repository folder in your text editor Using Atom, open the project folder for your assignment repository (FEWD/github/{name-of-your-assignment-repository})\nYou should always open the top-level folder for your project with your text editor (Atom) and not individually project files. This will help you stay organized and help you keep your sanity.\n One way to confirm that you\u0026rsquo;ve opened the \u0026ldquo;top-level\u0026rdquo; folder of a project is to confirm that you can see only one project and all of its child files/folders in the Tree View located in the left pane. Use cmd + \\ (mac) or ctrl+\\ (pc) to toggle the Tree View\nStep 11: Work on your assignment You are going to work on your assignment the way your normally would. Ensuring that you constantly save your work (cmd+s - mac / ctrl+s - pc ) along the way.\n(Git) Commit your work While you work on your assignment it is highly recommended that you periodically Commit your code.\nCommitting is Git\u0026rsquo;s way of saving the history of the changes you\u0026rsquo;ve made on the assignment (much like the \u0026ldquo;Track Changes\u0026rdquo; feature of word processors). A commit takes a \u0026ldquo;snapshot\u0026rdquo; of your project\u0026rsquo;s entire codebase. This is extremely powerful as it allows you to \u0026ldquo;time travel\u0026rdquo; throughout your code.\nIt is a best practice to commit your code once you\u0026rsquo;ve finished a \u0026ldquo;unit\u0026rdquo; of work.\nIf you approach your assignments by breaking them up in parts or tasks, then a unit would represent that task.\nFor example: If you were tasked with building a portfolio site for a client the project could be broken into a series of small tasks such as:\n implement design layout\n add css styles\n add portfolio images\n etc\n  If you were using git, it would be a best practice to have a commit for each one of the tasks above.\nWhy? Because if something breaks and is beyond repair, you can easily revert to a past commit that you know works.\nGit requires that you submit a message with each commit. This message is used to communicate the unit of work that was done.\nStep 12: Make a commit using Github Desktop After you\u0026rsquo;ve made changes associated with a \u0026ldquo;unit\u0026rdquo; of work, you\u0026rsquo;re ready to commit.\nOpen Github Desktop and ensure that you have selected the correct project (in Github Desktop)\nAfter you commit you can go back to working on your \u0026ldquo;next unit of work\u0026rdquo; or step.\nYou aren\u0026rsquo;t required to take this approach of breaking up your assignment into tasks (or units of work) but it is highly recommended.\n (Git) Push your work to Github to keep your work synced You have been committing your code periodically and now you\u0026rsquo;d like to see your changes reflected on Github.com (i.e. the remote repository). However, after navigating to remote repository on Github.com you find that none of your recent changes are being reflected.\nThe reason you don\u0026rsquo;t see anything is because you haven\u0026rsquo;t pushed your code back up to the remote repository on Github. Pushing your code keeps your local repository and its associated remote repository in sync.\nStep 13: Push your code back to the remote repository on Github.com In Github Desktop (after you have committed all your changes) press the button labeled Push Origin to push your changes to Github.\nStep 14: Confirm your commits were successfully \u0026ldquo;pushed\u0026rdquo; back to Github.com Navigate to remote repository for the assignment on Github.com (i.e. the assignment repository that is located under your Github account).\nConfirm that the changes you made are displayed in the commit history of the remote repository.\nIn this example we see that the changes made locally (on your computers) are now reflected (aka they were synced) with the associated remote repository!\nSubmit your homework by making a Pull Request You\u0026rsquo;ve made all our commits and you\u0026rsquo;ve finished the assignment. Now you are ready to submit your homework for feedback.\nStep 15: Make a pull request  While in your repository press the link labeled Pull requests to submit your homework. See gif below for more information.\n Press the green button labeled New pull request\n You will be taken to the \u0026ldquo;Open a pull request\u0026rdquo; screen that contains some dropdowns, these dropdowns do not need to be changed.  Then press the green button labeled Create pull request\n In the title field of the pull request, name your pull request using the following format: HW Submission by [Your Full Name]\n Finally, press the green button labeled Create pull request to complete the process of submitting your homework\n  See the example below:\n"
},
{
	"uri": "/01-html-basics/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Understand how web pages are structured\n Introduce some of the most frequently used html tags\n  "
},
{
	"uri": "/00-course-intro-and-tools/",
	"title": "Course Introduction &amp; Tools",
	"tags": [],
	"description": "",
	"content": " Lesson 00 Class Introduction \u0026amp; Tools "
},
{
	"uri": "/06-css-box-model/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Discuss how CSS Cascades\n Box Model\n Code Along: Tags \u0026amp; Boxes\n Lab: Fashion Blog\n  "
},
{
	"uri": "/03-relative-paths/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Learn about Relative Paths and why they are important  "
},
{
	"uri": "/01-html-basics/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " HTML Structure\n Overview of basic HTML Tags\n Code Along (GA Press Release)\n Lab (Cookie Recipe)\n  "
},
{
	"uri": "/03-relative-paths/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Discuss Relative Paths\n Complete Relative Paths exercise\n  "
},
{
	"uri": "/06-css-box-model/box-model-overview/margin/",
	"title": "Margin",
	"tags": [],
	"description": "",
	"content": " Margin  Margin represents the space between boxes  .thing { /* margin can be applied to individual sides of a box using margin-top, margin-bottom, margin-left or margin-right */ /* style below applies 20px to left side of box */ margin-left: 20px; } .other-thing { /* style below applies 10px to all four sides of box */ margin: 10px; } .gizmo { /* when 4 values are provided, then values are applied in a clockwork manner: margin: [top] [right] [bottom] [left]; */ /* style below applies 4px to top, 10px to right, 6px to bottom \u0026amp; 10px to left */ margin: 4px 10px 6px 10px; } .other-gizmo { /* when 2 values are represented as follows margin: [top \u0026amp; bottom], [left, right]; */ /* style below applies 4px to top \u0026amp; bottom and 10px to right \u0026amp; left */ margin: 4px 10px; }  JS Bin on jsbin.com\n"
},
{
	"uri": "/02-git-github/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Achieve high-level understanding of git and why developers use it\n Introduce students to a git workflow that will be used to submit (and recieve feeback on) assignments\n  "
},
{
	"uri": "/03-relative-paths/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": " Relative Paths  Relative URLs can be used when linking to pages and files within your own website.\n Shorthand way of telling the browser where to find your files.\n Inform students that they have already seen this is use with the link tag when referencing a css file\n  "
},
{
	"uri": "/02-git-github/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Tools Overview \u0026amp; Folder Organization\n Git Overview\n Code Along: Working with Github\n Exercise: Working with Github\n  "
},
{
	"uri": "/01-html-basics/html-structure/",
	"title": "HTML Structure",
	"tags": [],
	"description": "",
	"content": " Front page of a newspaper\n Which elements stand out and why?\n What would happen if every word was the same size font?\n  Document in a word processor\nHTML document\nSummary  Structure helps readers better understand all forms of documents\n Documents leverage hierarchy, size and font weight to emphasize importance\n HTML pages are another type documents\n  "
},
{
	"uri": "/01-html-basics/",
	"title": "HTML Basics",
	"tags": [],
	"description": "",
	"content": " Lesson 01 HTML Basics "
},
{
	"uri": "/06-css-box-model/css-cascading-guidelines/",
	"title": "CSS Cascading Guidelines",
	"tags": [],
	"description": "",
	"content": " How CSS Cascades There are guidelines that will determine which CSS rule takes precedent in the case of a conflict (when 2 or more css rules target the same selector)\n Last Rule\n Specificity\n Important\n Inheritance\n  "
},
{
	"uri": "/06-css-box-model/css-cascading-guidelines/last-rule/",
	"title": "Last Rule",
	"tags": [],
	"description": "",
	"content": " Last Rule  When two or more css rules have identical selectors, the latter of the two rules takes precedent   // in css p { color: red; } p { color: green; }  \u0026lt;!-- in html --\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Sample Page\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt; Color will be green\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Here the \u0026lt;p\u0026gt; tag will be green because the last conflicting rule took precedent\nLive Example\nJS Bin on jsbin.com\nIn the example above, we have identical selectors .box where each has a different property for background-color. In this case, the last rule law will apply and the background-color of the element will be red since it is listed last (in the css file) among the conflicting selectors.\n"
},
{
	"uri": "/06-css-box-model/box-model-overview/padding/",
	"title": "Padding",
	"tags": [],
	"description": "",
	"content": " Padding  Padding is the space between the border of a box and any content contained within it\n Adding padding helps to increase readability of a box’s content\n  .thing { /* padding can be applied to individual sides of a box using padding-top, padding-bottom, padding-left or padding-right */ /* style below applies 20px to left side of box */ padding-left: 20px; } .other-thing { /* style below applies 10px to all four sides of box */ padding: 10px; } .gizmo { /* when 4 values are provided, then values are applied in a clockwork manner: padding: [top] [right] [bottom] [left]; */ /* style below applies 4px to top, 10px to right, 6px to bottom \u0026amp; 10px to left */ padding: 4px 10px 6px 10px; } .other-gizmo { /* when 2 values are represented as follows padding: [top \u0026amp; bottom], [left, right]; */ /* style below applies 4px to top \u0026amp; bottom and 10px to right \u0026amp; left */ padding: 4px 10px; }  JS Bin on jsbin.com\n"
},
{
	"uri": "/01-html-basics/html-tag-anatomy/",
	"title": "HTML Tag Anatomy",
	"tags": [],
	"description": "",
	"content": " What is a Tag?  Tags act like containers, they tell the browser what type of information lies between (aka the content) the opening and closing tag\n Opening Tag\n comprised of character(s) surrounded by less than and equal than signs (brackets) characters within the brackets indicates the tags purpose  Closing Tag\n Same as opening tag except closing tag contains a forward slash which informs browser that element has ended   Terms “tags” and “elements” are often used interchangeably\n Example  \u0026lt;a href=\u0026quot;https://www.cnn.com\u0026quot;\u0026gt; CNN \u0026lt;/a\u0026gt;  "
},
{
	"uri": "/07-page-layout-flexbox/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Block and Inline Elements\n Containing Elements\n Semantic Elements\n Flexbox\n Exercise: Flexbox Froggy\n Code Along: Layout Challenge\n Lab: Layout Challenge\n  "
},
{
	"uri": "/03-relative-paths/example/",
	"title": "Example",
	"tags": [],
	"description": "",
	"content": " Example Project with Multiple Folders/Files Navigating within the Same Folder Linking from music index page to the music reviews page\n\u0026lt;a href=\u0026quot;reviews.html\u0026quot;\u0026gt; Music Reviews \u0026lt;/a\u0026gt;  Navigating to a file in a Child Folder Linking from the homepage (top-level index.html) to the music listings page\n\u0026lt;a href=\u0026quot;music/listings.html\u0026quot;\u0026gt; Music Listings \u0026lt;/a\u0026gt;  Navigating to a file in a Grandchild Folder Linking from the homepage (top-level index.html) to the dvd reviews page\n\u0026lt;a href=\u0026quot;movies/dvds/reviews.html\u0026quot;\u0026gt; DVD Reviews \u0026lt;/a\u0026gt;  Navigating up to a file in a Parent Folder Linking from the music reviews page to the homepage (top-level index.html)\n\u0026lt;a href=\u0026quot;../index.html\u0026quot;\u0026gt; Home \u0026lt;/a\u0026gt;  Use ../ to move up exactly 1 level in the folder hierarchy\nNavigating up to a file in a Grandparent Folder Linking from the dvd reviews page to the homepage (top-level index.html)\n\u0026lt;a href=\u0026quot;../../index.html\u0026quot;\u0026gt; Home \u0026lt;/a\u0026gt;  Here we used ../../ to move up 2 levels in the folder hierarchy\n"
},
{
	"uri": "/02-git-github/git-overview/",
	"title": "Git Overview",
	"tags": [],
	"description": "",
	"content": " What is Git?  Version control for Programmers\n Like Microsoft Word \u0026ldquo;Track Changes\u0026rdquo; feature with superpowers\n Makes it easy for programmers to collaborate and work on the same codebase\n SVN (subversion) and CVS are other version control programs (Git is the most popular)\n  What is Github?  Web-based Git repository hosting service\n Built on top of git\n Home to +90% of all open source projects\n Morphed into a \u0026ldquo;social network\u0026rdquo; for developers\n  Vocabulary  Repository Commit Branch Merge Push Pull Fork Clone Pull Request  Respository  Most basic element of GitHub\n A repository can be referred to as a projeect\n contains all of a project\u0026rsquo;s files\n Stores each file\u0026rsquo;s revision history\n Repositories can have multiple collaborators and can be either public or private.\n  Commit  A \u0026ldquo;revision\u0026rdquo;, is an individual change to a file (or set of files)\n Git\u0026rsquo;s version of \u0026ldquo;saving\u0026rdquo;\n Commits save a \u0026ldquo;snapshot\u0026rdquo; of all of the project\u0026rsquo;s files at that point in time\n Using commits you can \u0026ldquo;time travel\u0026rdquo; and navigate back to any previous commit that was made throughout the history of the project\n Commits usually contain a commit message which is a brief description of what changes were made\n  Branch  Parallel version of a repository\n Branches allow developers to work on new features without affecting the \u0026ldquo;master\u0026rdquo; branch and disrupting the \u0026ldquo;live\u0026rdquo; version\n The process of creating a separate branch to work on a feature is referred to as \u0026ldquo;creating a feature branch\u0026ldquo;\n After developers have added their new feature (on their feature branch) they will then make a Pull Request (which is a request for comments and a request to Merge their changes back into the main branch (master branch))\n  Master Branch  The default branch found in every Git respository\n For most companies, the master branch reflects that latest version of production code (i.e. working code available to customers)\n  Merge  Merging takes the changes from one branch (in the same repository or from a fork), and applies them into another\n This often happens as a Pull Request (which can be thought of as a request for comments and a request to merge into the another branch - usually the master branch)\n  Push  Refers to sending your committed changes to a remote repository such as GitHub.com\n For instance, if you change something locally, you\u0026rsquo;d want to then push those changes so that others may access them\n  Pull  Pulls code from a remote repository and merges it with code in your local repository (on your computer)  Fork  A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project\n Most commonly, forks are used to either propose changes to someone else\u0026rsquo;s project or to use someone else\u0026rsquo;s project as a starting point for your own idea\n  Clone  Copies a remote repository (i.e. repository in the cloud on a platform like Github.com) and creates a local copy of the repository on your computer\n Cloning creates a link between the the remote and local copy of a repository, allowing you to your code in sync between the two\n  Pull Request  Pull requests are proposed changes to a repository submitted by a user and accepted or rejected by a repository\u0026rsquo;s collaborators (i.e. team members).\n Pull requests can be thought of as a developer asking for permission to merge their changes into the master branch\n Pull requests each have their own discussion forum, where developer can discuss the changes requested and suggest further revisions.\n This discussion as also referred to as Code Reviews\n  Great resource for all things git can be found here\n "
},
{
	"uri": "/07-page-layout-flexbox/block-inline-elements/",
	"title": "Block and Inline Elements",
	"tags": [],
	"description": "",
	"content": " Block Level Elements  Always appear on a new line or row\n By default, block elements take up an entire row regardless of the width of their content\n Example block elements: \u0026lt;p\u0026gt;, \u0026lt;h1\u0026gt;, \u0026lt;div\u0026gt;\n  JS Bin on jsbin.com\nFull list of block level elements can be found here\n Inline Elements  Sit within a block level element and do not start on a new line\n By default, inline elements only occupy the horizontal space needed to fit its content\n The height and width properties of an inline element will not be recognized\n Example inline elements: \u0026lt;a\u0026gt;, \u0026lt;img\u0026gt;, \u0026lt;span\u0026gt;\n  JS Bin on jsbin.com\nFull list of inline elements can be found here\n Inline-Block  Allows you make an element inline while also allowing the element to recognize height and width properties\n inline-block is set as a value of the display property in CSS\n  JS Bin on jsbin.com\nChanging Default Layout Behavior of Elements  The default layout behavior of elements can be overriden using the display property in CSS  // in css p.customer-logos { display: inline; }  In the example above, we are using CSS to change the matching \u0026lt;p\u0026gt; elements (with a class of customer-logos) to display inline instead of its default display layout behavior of block\nFor more information about the display property click here\n "
},
{
	"uri": "/01-html-basics/html-attributes/",
	"title": "HTML Attributes",
	"tags": [],
	"description": "",
	"content": " What is an HTML Attribute?  Attributes provide additional information about the contents of the an element.\n They are placed in the opening tag\n They have two parts: name, value\n  Attribute Structure  Attribute Name\n Indicates what kind of extra information you are supplying to the browser about the content in the element characters within the brackets indicates the tags purpose  Attribute Value\n Information or setting for the attribute Is placed in double or single quotes   Example of a HTML Attribute  \u0026lt;img src=\u0026quot;mdn-logo-sm.png\u0026quot; alt=\u0026quot;MDN\u0026quot;\u0026gt;  A complete list of all the available HTML attributes can be found here\n "
},
{
	"uri": "/18-final-projects-lab/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Code Along: Host Final Projects using Github Pages\n Lab: Work on Final Projects\n  "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flexbox-terminology/",
	"title": "Flexbox Terminology",
	"tags": [],
	"description": "",
	"content": " Flex Container  The parent element in which flex items are contained\n Defined using the flex or inline-flex values of the display property\n flex: will make the flex-container a block-level element\n inline-flex: will make the flex-container an inline element\n   Flex Item  Children of a flex container  Main Axis  The axis along which the flex items follow each other\n flex-direction property determines the main axis\n  Cross Axis  The axis perpendicular to the main axis  Main Axis and Cross Axis changes with Flex Direction  If the flex-direction is row or row-reverse then the main axis will be along the horizontal plane and the cross axis will be along the vertical plane\n If the flex-direction is column or column-reverse then the main axis will be along the vertical plane and the cross axis will be along the horizontal plane\n  "
},
{
	"uri": "/10-intro-to-jquery/jquery-in-action/reading-writing-content/text/",
	"title": ".text()",
	"tags": [],
	"description": "",
	"content": " .text()  Allows you to either read (get) or write (set) the text of html elements (documentation)  Reading Text  To read (or get) the text of elements using jQuery you need to use the .text() method with nothing between the parentheses   // read the text found in the element .main // notice how nothing is in-between the parentheses $(\u0026quot;.main\u0026quot;).text();  Example #1 - Reading text using .text()\nJS Bin on jsbin.com\nIn the example above jQuery is used to listen for a .click() event on the button element and then call the showMessage() function when the element is clicked\nInside the showMessage function, $(\u0026quot;#lead\u0026quot;) selects the element with an id of lead and uses the .text() method with nothing in-between the parentheses to READ text found in the #lead element\nWriting Text  To write or update the text of elements using jQuery you need to use the .text() and place the new text in-between the parentheses   // Update the text found in .main to read \u0026quot;Hello World\u0026quot; // notice how we place \u0026quot;Hello World\u0026quot; in-between the parentheses $(\u0026quot;.main\u0026quot;).text(\u0026quot;Hello World\u0026quot;);  Example #2 - Writing text using .text()\nJS Bin on jsbin.com\nIn the example above jQuery is used to listen for a .click() event on the button element and then call the changeLeadSinger() function when the element is clicked\nInside the changeLeadSinger function, $(\u0026quot;#lead\u0026quot;) selects the element with an id of lead and uses the .text(\u0026lt;new text\u0026gt;) method with the new text placed in-between the parentheses to WRITE new text to the #lead element\n"
},
{
	"uri": "/15-responsive-design/media-queries/media-query-parts/media/",
	"title": "@media",
	"tags": [],
	"description": "",
	"content": "  @media only screen and (min-width: 576px) { /** add styles here **/ }  @media  All media queries must start with @media  "
},
{
	"uri": "/09-intro-to-programming/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " What is Programming?\n Pseudocode\n Class Exercise: Thermostat\n Group Exercise: Rock, Paper, Scissors\n What is Javascript?\n Code Along: Color Scheme Switcher\n Lab: Traffic Light\n  "
},
{
	"uri": "/10-intro-to-jquery/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Programming protips\n jQuery Overview\n See jQuery in Action (Code Examples)\n Code Along: Color Scheme Switcher (with jQuery)\n Lab: jQuery DOM Selector Practice\n  "
},
{
	"uri": "/11-javascript-fundamentals/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Code Along: FAQ\n Console Log\n Variables\n Data Types\n Arithmetic Operators\n Code Along: Score Keeper\n Comparison \u0026amp; Logical Operators\n Conditionals\n Code Alongs: Compare That \u0026amp; Blackout\n  "
},
{
	"uri": "/13-arrays-and-loops/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Review arrays\n Discuss looping / iterating through arrays\n Discuss using objects with arrays\n Code Along: Array Exercise\n Lab: Rock Paper Scissors\n  "
},
{
	"uri": "/14-javascript-lab/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Discuss anonymous functions\n Discuss $(this)\n Lab: Weather Application\n  "
},
{
	"uri": "/15-responsive-design/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Fixed Width and Mobile Layouts\n Responsive Design Overview\n Viewport Meta Tag\n Media Queries and Breakpoints\n Grids\n Code Along\n Ems / Rems\n Lab\n  "
},
{
	"uri": "/16-responsive-design-lab/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Review Concepts from last class\n Lab: Startup Matchmaker - Responsive\n  "
},
{
	"uri": "/17-forms/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Discuss Forms\n Styling Tips for Forms\n Code Along: Contact Us Form\n  "
},
{
	"uri": "/08-css-positioning-and-colors/background-images/background-image/",
	"title": "Background Image",
	"tags": [],
	"description": "",
	"content": " background-image Property  background-image property allows you to place an image behind any HTML element\n Image can be \u0026ldquo;behind\u0026rdquo; the entire page or part of a page\n By default a background image will repeat to fill an entire box\n  body { /* this image will be applied to the entire page */ background-image: url(\u0026quot;images/cool-background-image.gif\u0026quot;); } .hero-section { /* this image will be applied to container with a \u0026quot;hero-section\u0026quot; class attribute */ background-image: url(\u0026quot;images/another-cool-background-image.gif\u0026quot;); }  "
},
{
	"uri": "/06-css-box-model/box-model-overview/border/",
	"title": "Border",
	"tags": [],
	"description": "",
	"content": " Border  Every box has a border, and by default it is invisible (0 pixels wide)\n Borders separates the edge of one box from another\n Border is expressed in three parts\n Border width: how thick the border will be\n Border style: solid, dashed, etc\n Border color: color of the border\n    /* border is most usually expressed using shorthand which allows you to specify a combination of the border 3 properties when using shorthand for border the order of the values does not matter */ /* style */ border: solid; /* width | style */ border: 2px dotted; /* style | color */ border: outset #f33; /* width | style | color */ border: medium dashed green; /* Border can be applied to individual sides of a box using border-top, border-bottom, border-left or border-right */ border-top: solid 1px blue; /* Also you can specify the border properties individually (this approach is not widely used) */ border-color: red; border-style: solid; border-width: 1px; border-top-color: blue; border-bottom-width: 3px;  JS Bin on jsbin.com\n"
},
{
	"uri": "/03-relative-paths/code-along-relative-paths/",
	"title": "Code Along - Relative Paths",
	"tags": [],
	"description": "",
	"content": " Code Along: Relative Paths  Using Atom, open the folder called relative_paths_exercise in your lesson_03_files folder. You will be using these files as starting off point.  Instructions  1) Add a link from the Homepage to the About page\n 2) Add a link from the About page to the Homepage\n 3) Add links from Homepage to index.html pages of the following sections:\n Mammals Birds Reptiles  4) Add links from the Homepage to the index.html pages of the following sections:\n Marsupials Placentals Monotremes  5) Add the associated images (from the provided image folder) to the index.html page of the following sections:\n Mammals Birds Reptiles  6) Add a link from the index.html pages of the Mammals, Reptiles and Birds section back to the Homepage\n 7) Add a link from the listing.html page of Monotremes back to the Homepage\n 8) Add a link from the listing.html page of the Marsupials section to the listing.html page of the Monotremes section\n 9) Add a link from the index.html page of the Placentals section to the index.html page of the Marsupials section\n 10) Add a link from the index.html page of the Marsupials section back to the homepage\n  "
},
{
	"uri": "/02-git-github/code-along-working-with-github/",
	"title": "Code Along: Working with Github",
	"tags": [],
	"description": "",
	"content": " During this exercise, we will be walking through the process of working with Git and Github.\nThe steps for submitting your assignments using Git \u0026amp; Github are detailed here\nSteps  1) Fork this US states repository located on Github.com\n 2) Clone the Repository using Github Desktop\n 3) Save the local copy of the repository in your FEWD/github folder\n 4) Open the project in Visual Studio Codeand fix the spelling errors found in index.html; save your work.\n 5) Commit your changes using Github Desktop. Use the following commit message: \u0026ldquo;Fixed spelling errors\u0026rdquo;\n 6) Push your changes to Github using Github Desktop\n 7) Confirm that your changes were pushed by viewing your repository\u0026rsquo;s \u0026ldquo;commit history\u0026rdquo; on Github.\n 8) The states should be in alphabetical order. Go back to your project in Visual Studio Codeand ensure the state names are listed alphabetically. Save your work.\n 9) Commit your changes using Github Desktop. Use the following commit message: \u0026ldquo;Ordered state names alphabetically\u0026rdquo;.\n 10) Push your changes to Github using Github Desktop\n 11) Confirm that your changes were pushed by viewing your repository\u0026rsquo;s \u0026ldquo;commit history\u0026rdquo; on Github.\n 12) Next you will be submitting your work comments, make Pull Request, the title of the pull request should be \u0026ldquo;Fixed issues spelling and order issues\u0026rdquo;\n 13) You just found out that you also need to add the 5 U.S. territories to the list (why didn\u0026rsquo;t these idiots tell me this the first time?? 😒 )\n Go back to your project in Visual Studio Codeand add the 5 U.S. territories. Save your work.\n 15) Commit your changes using Github Desktop. Use the following commit message: \u0026ldquo;Added 5 U.S. territories\u0026rdquo;.\n 16) Push your changes to Github using Github Desktop\n 17) Confirm that your changes were pushed by viewing your repository\u0026rsquo;s \u0026ldquo;commit history\u0026rdquo; on Github.\n 18) Observe, that you do not need to submit another Pull Request since your current Pull request is still \u0026ldquo;Open\u0026rdquo;.\n  Any commits pushed to a remote repository after a Pull Request has been made will be added to the existing Pull Request as long as it is still in an Open state\n "
},
{
	"uri": "/08-css-positioning-and-colors/css-colors/color-names/",
	"title": "Color Names",
	"tags": [],
	"description": "",
	"content": " Color Names  colors represented by predefined names 147 color names this approach is limited  h1 { color: green; }  "
},
{
	"uri": "/21-class-resources/documentation/",
	"title": "Documentation",
	"tags": [],
	"description": "",
	"content": "  Referencing documentation is a core task for developers.\n Documentation communicates how something (in our case programming languages, software libraries) works.\n Good documentation reduces implementation time and increases predictability of our software programs.\n  We will be referring to the following list of the documentation resources frequently throughout the course:\nHTML MDN\u0026rsquo;s HTML Reference\nCSS MDN\u0026rsquo;s CSS Reference\nJavascript MDN\u0026rsquo;s Javascript Reference\njQuery jQuery Documentation\n"
},
{
	"uri": "/15-responsive-design/relative-measurements/ems/",
	"title": "EMS",
	"tags": [],
	"description": "",
	"content": " What are EMs?  Scalable unit that is used in web document media\n Font-size is computed relative to font-size of parent element\n Does not lock users into an absolute font-size (older browsers do not re-size text set in pixels when users zoom)\n Provides users with highest level of control over the content they are viewing\n  History: Old-fashioned metal typesetting, the em referred to the size of the metal plates that contained a raised letter, which had to be wide enough to fit the widest letter, the capital M. Many people assume that digital ems are also based on the width of the letter M, but they aren’t.\n EMs in practice  html { // set base font-size for entire site font-size: 16px; } h1 { // translates to \u0026quot;make h1 element 1.4x larger than base font size (16px)\u0026quot; // resulting in a font size of 22.4px font-size: 1.4em; } h2 { // translates to \u0026quot;make h1 element 1.3x larger than base font size (16px)\u0026quot; // resulting in a font size of 20.8px font-size: 1.3em; }  Example: EMs in action\nJS Bin on jsbin.com\nIn the example above the font-size of the .green-box element is significantly larger than the other boxes even though it has the same value for font-size: 1.4em;\nThis is due to the fact that ems are calculated relative to their parent so in the case of the .green-box element the browser will use the following calculation to determine its font-size in pixels:\n16px * 1.4 * 1.4 * 1.4 = 43.9px  Example: Using EMs for width\nJS Bin on jsbin.com\nIn the example above is set to 20em. Since the default font size of the page is set to 16px, the calculation of the width will be the following:\n16px * 20 = 320  Why use EMs?  Main reason is to effectively scale our text (and other css attributes) up and down depending on the screen size\n Click here for a great example of responsively styled text (resize your browser window to see the effect)\n  "
},
{
	"uri": "/02-git-github/",
	"title": "Git &amp; Github",
	"tags": [],
	"description": "",
	"content": " Lesson 02 Git \u0026amp; Github "
},
{
	"uri": "/21-class-resources/running-local-server/macos/",
	"title": "MacOS Instructions",
	"tags": [],
	"description": "",
	"content": " MacOS Instructions  Open the Terminal application on your Macbook\n Using the command line navigate to the project folder\nIn the hypothetical example below the project folder is stored in Documents/FEWD/Demos/mapbox_example\nOn your command line you would do the following (do not type \u0026lsquo;$\u0026rsquo;, your text input on the command line should with cd):\n$ cd Documents/FEWD/Demos/mapbox_example  Run python -m SimpleHTTPServer 8000 to start the local server\n Open your browser and navigate http://localhost:8000\n  At this point your project will be displayed in the browser and you will have successfully launched your project on a local server.\nNOTE: To close the server press Ctrl-c to close the server when it is not in use\n"
},
{
	"uri": "/course-materials/code-demos/maps-with-mapbox/",
	"title": "Maps with MapBox",
	"tags": [],
	"description": "",
	"content": " Overview Mapbox is a Javascript library that allows you to add maps to your projects\nDemo Application Summary This application uses Mapbox chart a map of all of the Museums in NYC.\ndownload NYC Museums Map\nSetup Instructions  Sign up for a Mapbox account\n Download the demo application and save files in your class folder\n Add your Access Token to main.js on line 7\n Run a Local Server on your computer (Required!) Using the command line, navigate to the project folder (from Step #2 above) and start a local server\n Open up your browser and type the following address into the address bar: http://localhost:8000\n  "
},
{
	"uri": "/15-responsive-design/media-queries/media-query-overview/",
	"title": "Media Query Overview",
	"tags": [],
	"description": "",
	"content": " What are the Media Queries?  Key element in responsive design\n Allow you to apply different styles based on the screen size of the user\u0026rsquo;s device (viewport)\n Media Queries ask questions such as: Is the width of the viewport greater than or equal to 768px?\n Media queries don’t affect the HTML (the actual content and structure of the underlying page) — they only affect the styles that are applied to the page using CSS\n Media queries are added to your CSS stylesheets\n  Media Query Example  body { background-color: green; } @media only screen and (min-width: 576px){ body { background-color: blue; } }  This query is asking \u0026ldquo;If this is a screen AND is the viewport greater than or equal to 576 pixels?\u0026rdquo; If so, make the background color blue.\n"
},
{
	"uri": "/final-projects/overview-requirements/",
	"title": "Overview &amp; Requirements",
	"tags": [],
	"description": "",
	"content": " Overview  Final Projects are a requirement of \u0026ldquo;course completion\u0026rdquo;\n Project should be something that you are passionate about\n We\u0026rsquo;ve established some milestones (and due dates) that will help you stay on track to complete your projects on time\n Each milestone will include a deliverable  Instruction team will actively work with you to help you manage scope and come up with a project plan\n Click here for examples of what other GA FEWD students have built\n  Requirements Your final projects must make use of the following:\n HTML\n CSS\n \u0026ldquo;some\u0026rdquo; javascript\n Good indentation\n Follow best practices for file/folder structure\n  "
},
{
	"uri": "/19-final-project-presentations/presentation-script/",
	"title": "Presentation Script",
	"tags": [],
	"description": "",
	"content": " Presentation Script Each student will use the script below to present their projects to the class\n Introduce yourself and your project\n Question: Why did you choose to build this project?\n Provide the class with a quick demo of your project\n Question: What was the most challenging aspect your project?\n Question: Given more time and knowledge what additional features would you have added?\n Question: What did you enjoy most about building this project?\n Audience Q/A\n  "
},
{
	"uri": "/10-intro-to-jquery/jquery-in-action/selecting-elements/",
	"title": "Selecting Elements",
	"tags": [],
	"description": "",
	"content": " Selecting Elements  A most common usage pattern for jQuery is to programmatically select (or grab) an element and then do something to it - usually add a listener or manipulate (change) it in some way\n jQuery allows us to use css selectors to select elements:\n   // We can use css selectors to programmatically select elements $('p'); // Element/Tag selector $('.feature'); // Class selector $('#checkout'); // ID selector $('li strong'); // Descendant selector $('em, i'); // Multiple selector $('a[target=\u0026quot;_blank\u0026quot;]'); // Attribute selector $('p:nth-child(2)'); // Pseudo-class selector   Dynamically changing your page using Javascript is commonly referred to as manipulating the DOM  Example #1\nJS Bin on jsbin.com\nIn the example above jQuery is used to listen for a .click() event on the #button element and then call the completeItem() function when that element is clicked\nInside the changeBackgroundColor function, $(\u0026quot;p\u0026quot;) selects the p element and uses the .toggleClass() method to dynamically toggle the class of .red-background\nExample #2\nJS Bin on jsbin.com\nIn the example above jQuery is used to listen for a .click() event on the #mark-complete element and then call the completeItem() function when the element is clicked\nInside the completeItem function, $(\u0026quot;p.last-of-type\u0026quot;) selects the last p element and uses the .addClass() method to dynamically add a class to the element\n"
},
{
	"uri": "/06-css-box-model/css-cascading-guidelines/specificity/",
	"title": "Specificity",
	"tags": [],
	"description": "",
	"content": " Specificity  If one selector is more specific than others, then the more specific rule takes precedent\n For example:\n h1 is more specific than * p.discount is more specific than p #city is more specific than img.town   Live Example\nJS Bin on jsbin.com\nIn the example above #featured is more specific than .box so the background-color of the element will be red even though .box is listed after #featured\n"
},
{
	"uri": "/08-css-positioning-and-colors/css-positioning/static-positioning/",
	"title": "Static Positioning",
	"tags": [],
	"description": "",
	"content": " Static Positioning (Normal Flow)  Default way browser handles block and inline elements\n Each block-level element sits on top of the next one\n Inline elements will share line/row with other inline elements (space permitting)\n If developers want to explicitly specify static positioning, they can do so using CSS:\n  .box { /* not necessary, as this is the default for all elements */ position: static; }  However, this is not necessary since all elements are statically positioned by default\nJS Bin on jsbin.com\n"
},
{
	"uri": "/11-javascript-fundamentals/data-types/strings/",
	"title": "Strings",
	"tags": [],
	"description": "",
	"content": " Strings  Strings can consist of letters and other characters\n They are surrounded by either double quotes or single quotes (this is how you recognize you are working with a string)\n Concatenation allows you to combine strings\n  // declare a variable called color and store a string let color = \u0026quot;green\u0026quot;;  Single or double quotes can be used for strings, but the opening quote must match the closing quote\n String Methods  Javascript has some built-in methods that allow developers to work with strings\n For example: if you wanted to know how many characters were in a string, you would use the .length method\n Here are some example of other methods you can use on strings\n  JS Bin on jsbin.com\nClick here for complete list of all the String methods\n "
},
{
	"uri": "/17-forms/form-elements/text-input/",
	"title": "Text Input",
	"tags": [],
	"description": "",
	"content": " Text Input \u0026lt;form action=\u0026quot;http://www.example.com/login.php\u0026quot;\u0026gt; \u0026lt;p\u0026gt; Username: \u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;username\u0026quot; maxlength=\u0026quot;30\u0026quot; /\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/form\u0026gt;  Text Input Example Text Input Attributes  type=\u0026ldquo;text\u0026rdquo;: Tells browser input will store plain text name: Used by the server to identify which form control that data came from maxlength: (optional) Specifies that max number of characters that can be entered  "
},
{
	"uri": "/15-responsive-design/responsive-design-overview/what-is-responsive-design/",
	"title": "What Is Responsive Design?",
	"tags": [],
	"description": "",
	"content": " What is Responsive Design?  A way of making websites that can be easily viewed and used on any type of device and size of screen  Advantages of Responsive Design  Developers only have to create one website, one design, one set of code, and one set of content\n Better optimized for search (SEO), no longer need to use m-dot websites\n  "
},
{
	"uri": "/11-javascript-fundamentals/variables/what-are-variables/",
	"title": "What are Variables?",
	"tags": [],
	"description": "",
	"content": " What are variables?  Allows us to store values and so our programs can keep track of Data\n Similar to algebra\n Helps you represent data or values\n Used to help your program “remember” values\n Can be thought of as a “box” that we put values in\n In programming, you store values in variables if you plan on referencing that value at a later time\n  "
},
{
	"uri": "/10-intro-to-jquery/jquery-overview/what-is-jquery/",
	"title": "What is jQuery?",
	"tags": [],
	"description": "",
	"content": " What is jQuery?  A Javascript library that makes it easy to dynamically update your pages (i.e. perform DOM manipulation)\n Offers a simple way to achieve a variety of common Javascript tasks\n Consistent across all browsers\n Does not do anything native / vanilla Javascript cannot do, just does it with a more intuitive syntax\n  It\u0026rsquo;s important to note that jQuery is NOT another programming language it is a library or tool built on top of Javascript\n "
},
{
	"uri": "/15-responsive-design/viewport-meta-tag/what-is-viewport/",
	"title": "What is the Viewport?",
	"tags": [],
	"description": "",
	"content": " What is the viewport?  Area on the computer or device screen where you are viewing a web page\n Viewport width is not always the same thing as screen width\n For example: Drogo has a laptop that has a maximum screen width of 1280px, but likes to resize his web browser to 800px (viewport width)  On mobile devices viewport width is the same as screen width because mobile devices don\u0026rsquo;t allow you to change the size of your browser\n  "
},
{
	"uri": "/course-materials/code-demos/getting-data-from-other-services/itunes-search-api/",
	"title": "iTunes Search API",
	"tags": [],
	"description": "",
	"content": " Demo Application Summary This application uses the iTunes API to display a list of songs/albums associated with artist submitted into the search field\ndownload iTunes Search Application\n"
},
{
	"uri": "/05-css-selectors/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Classes and IDs\n CSS Selectors Overview \u0026amp; Examples\n Exercise: CSS Diner\n  "
},
{
	"uri": "/01-html-basics/tag-overview/",
	"title": "Tag Overview",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/04-css-basics/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Thinking in boxes\n What is CSS\n Adding CSS to your websites\n  "
},
{
	"uri": "/08-css-positioning-and-colors/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " CSS Colors\n CSS Positioning\n Background Images\n Lab: Fashion Blog - Pt 2\n  "
},
{
	"uri": "/12-functions/agenda/",
	"title": "Agenda",
	"tags": [],
	"description": "",
	"content": " Discuss Functions\n Code Along: Geometry Formulas using Functions\n Code Along: HiLo\n Lab: Complete HiLo\n  "
},
{
	"uri": "/homework-assignments/assignments/",
	"title": "Assignments",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/02-git-github/exercise-github-workflow/",
	"title": "Exercise: Working with Github",
	"tags": [],
	"description": "",
	"content": " Work together in pairs and follow the directions below.\nUse this Guide as reference\nSteps  1) Fork this repository located on Github.com\n 2) Clone the Repository using Github Desktop\n 3) Save the local copy of the repository in your FEWD/github folder\n 4) Open the project in Visual Studio Codeand and add the lyrics to Barney\u0026rsquo;s (you know the purple dinosaur) hit song \u0026ldquo;I Love You\u0026rdquo;. Save your work.\n 5) Commit your changes using Github Desktop. Use the following commit message: \u0026ldquo;Added Barney lyrics\u0026rdquo;\n 6) Push your changes to Github using Github Desktop\n 7) Confirm that your changes were pushed by viewing your repository\u0026rsquo;s \u0026ldquo;commit history\u0026rdquo; on Github.\n 8) Your client also wants an image of Barney to be added to the page. Find an image of Barney on the internet (family friendly please!) and updated your project in Atom.\n 9) Commit your changes using Github Desktop. Use the following commit message: \u0026ldquo;Added Barney image\u0026rdquo;.\n 10) Push your changes to Github using Github Desktop\n 11) Confirm that your changes were pushed by viewing your repository\u0026rsquo;s \u0026ldquo;commit history\u0026rdquo; on Github.\n 12) Next you will be submitting your work comments, make Pull Request, the title of the pull request should be \u0026ldquo;Completed barney website\u0026rdquo;\n 13) Your client also wants you to add the lyrics to the Barney Theme song.\n Go back to your project in Visual Studio Codeand add the lyrics to the Barney Theme song. Save your work\n 15) Commit your changes using Github Desktop. Use the following commit message: \u0026ldquo;Added barney theme song lyrics\u0026rdquo;.\n 16) Push your changes to Github using Github Desktop\n 17) Confirm that your changes were pushed by viewing your repository\u0026rsquo;s \u0026ldquo;commit history\u0026rdquo; on Github.\n 18) Observe, that you do not need to submit another Pull Request since your current Pull request is still \u0026ldquo;Open\u0026rdquo;.\n  Any commits pushed to a remote repository after a Pull Request has been made will be added to the existing Pull Request as long as it is still in an Open state\n "
},
{
	"uri": "/03-relative-paths/",
	"title": "Relative Paths",
	"tags": [],
	"description": "",
	"content": " Lesson 03 Relative Paths "
},
{
	"uri": "/06-css-box-model/css-cascading-guidelines/important/",
	"title": "!important",
	"tags": [],
	"description": "",
	"content": " !important  You can override all the above rules by adding a “!important” after any property\n This should be used sparingly; excessive use of !important can cause confusion within your codebase\n  // in css #thing { color: green; } // add the !important option at the end of your declaration; p { color: red !important; }  \u0026lt;!-- in html --\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Sample Page\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p id=\u0026quot;thing\u0026quot;\u0026gt;Will be RED and NOT Green\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Here we used the !important option in CSS to override the Specificity guideline that would have had the rule with the selector of #thing take precedence under normal circumstances\nLive Example\nJS Bin on jsbin.com\nIn the example above, the background-color of the element is blue despite that fact that of the conflicting styles #featured is more specific than .box. This is because we used the !important flag on the background-color property inside of the .box style which will override normal cascading rules.\n"
},
{
	"uri": "/04-css-basics/thinking-in-boxes/",
	"title": "Thinking in Boxes",
	"tags": [],
	"description": "",
	"content": " Understanding the CSS Box Model is key to understanding how CSS works\n Going forward, you should view every element as a box (because that\u0026rsquo;s how browsers view them)\n   Block elements in the image are outlined in red, while inline elements are outlined in green\n Every element is a box, some boxes contain other boxes \u0026lt;body\u0026gt;, \u0026lt;div\u0026gt; or \u0026lt;article\u0026gt;\n CSS allows you to create rules the control each individual box\n Let\u0026rsquo;s take a look at how a live site looks when we view it in terms of it\u0026rsquo;s boxes\n  "
},
{
	"uri": "/15-responsive-design/fixed-width-layouts/",
	"title": "Fixed Width Layouts",
	"tags": [],
	"description": "",
	"content": " Fixed Width Layouts  Method of designing websites so they look the same on any sized monitor\n Pre-dates advent of smartphones and mobile web-browsing\n Not optimized for smaller screens\n Uses pixels to set width of the layout\n Still fairly common\n  Examples of Fixed Width Design  ikea.com\n amazon.com\n  Disadvantages of Fixed Width Design  Displayed the same way regardless of screen size\n Not well suited to handle the explosion of web browsing via mobile devices\n  "
},
{
	"uri": "/04-css-basics/css-intro/",
	"title": "Intro to CSS",
	"tags": [],
	"description": "",
	"content": " What is CSS?  Stands for Cascading Style Sheet\n Allows you to control design of page\n With CSS allows you to create rules that specify how the content of an element should appear\n  p { color: gray; }  Applying the CSS rule above will result in text color of all \u0026lt;p\u0026gt; tags being changed to gray.\nAnatomy of a CSS Rule  CSS works by associating rules with HTML elements.\n These rules govern how the content of specified elements should be displayed\n CSS Rules are made up of two parts: a selector and a declaration\n Selectors\n indicate which element the rule applies to  Declarations\n indicate how the elements referred to in the selector should be styled split into two parts (a property and a value), and are separated by a colon     p { color: black; } h1, h2, h3 { font-family: Gill Sans Extrabold, sans-serif; color: #191919; }  "
},
{
	"uri": "/04-css-basics/",
	"title": "CSS Basics",
	"tags": [],
	"description": "",
	"content": " Lesson 04 CSS Basics "
},
{
	"uri": "/04-css-basics/adding-css/",
	"title": "Adding CSS to your website",
	"tags": [],
	"description": "",
	"content": " There are three ways to add css to your site  1) Inline (avoid!)\n 2) Internal css using \u0026lt;style\u0026gt; tag (avoid!)\n 3) External file (best practice)\n  Inline CSS (avoid!)  This method involves adding styles directly to html elements using a style attribute   \u0026lt;body style=\u0026quot;background-color: orange;\u0026quot;\u0026gt; \u0026lt;!-- other tags redacted for example --\u0026gt; \u0026lt;/body\u0026gt;  Internal CSS (avoid!)  This method involves adding styles directly to html elements using a \u0026lt;style\u0026gt; tag  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Sample Page\u0026lt;/title\u0026gt; \u0026lt;style type=\u0026quot;text/css\u0026quot;\u0026gt; body { font-family: Arial; background-color: rgb(185, 179, 175); } h1 { color: rgb(255, 255, 255); } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- other tags redacted for example --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Add CSS using an external stylesheet (Best Practice)  The use of external CSS stylesheets allows you to place all of your styles in a central location, any site-wide changes can be made in a single place\n A \u0026lt;link\u0026gt; tag must be used to connect a stylesheet to an html file\n  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Sample Page\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; href=\u0026quot;css/styles.css\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- other tags redacted for example --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  //in css/styles.css body { font-family: Arial, sans-serif, serif; padding: 10px; } p { font-size: 14px; color: #333333; }  \u0026lt;link\u0026gt; Tag  Link tag is used to specify the relationship between an html file and an external file\n Here are some commonly used attributes for the \u0026lt;link\u0026gt; tag\n href: specifies the path to the external file\n rel: specifies the relationship between the HTML page and the file it is linked to. The value of this attribute should be stylesheet when linking to a CSS file\n type: specifies the type of document being linked to. This value should be \u0026ldquo;text/css\u0026rdquo;\n   The rel attribute is required when linking to css stylesheet\n"
},
{
	"uri": "/05-css-selectors/classes-and-ids/",
	"title": "Classes and Ids",
	"tags": [],
	"description": "",
	"content": " Classes and Ids  Both are just HTML attributes\n Should start with a letter or underscore\n Can be applied to any html element\n Important: Use of the class or id attribute by itself does not change the appearance of an element; CSS/Javascript must be involved\n  Class Attribute  Is used to group elements together, therefore establishing them as different from other elements on the page\n Element can share the same class attribute values (this could be applied to another type of element)\n   \u0026lt;!-- in html --\u0026gt; \u0026lt;p class='important'\u0026gt; Awesome content \u0026lt;/p\u0026gt;   // in css, use a period to specify a class selector in css .important { font-weight: bold; }  In css class selectors are specified using a . (period)\n Id Attribute  Used to uniquely identify elements on a page\n No two elements should have the same id value (otherwise it would not be unique)\n   \u0026lt;!-- in html --\u0026gt; \u0026lt;button id='add-task'\u0026gt; Add Task \u0026lt;/button\u0026gt;   // in css a '#' (hash) is used to specify an id selector #add-task { font-size: 12px; }  In css id selectors are specified using a # (hash)\n Naming classes and ids  Developers can choose any name they want for classes and ids, however the names you choose should be descriptive  When should you use classes instead of ids (or vice versa)?  Use classes if applying a general style to more than one element on the same page\n Use ids when you style element differently from any other instance of the same element\n Use ids when using javascript to precisely target elements\n  "
},
{
	"uri": "/12-functions/defining-functions/",
	"title": "Defining Functions",
	"tags": [],
	"description": "",
	"content": " Defining a Function  A function definition is code that stipulates what the function can do\n Use the function keyword to define a function\n Functions can be given a name\n The name must be followed by parentheses\n The opening and closing curly braces indicate a “code block”\n The statements for your function goes within the code block\n Simply defining the function will not run this code, this function must be “called” in order for the code inside the function to be run\n Also referred to as \u0026ldquo;declaring a function\u0026rdquo;\n  // define a function named sayGoodMorning() function sayGoodMorning() { console.log(\u0026quot;Good Morning\u0026quot;); }  "
},
{
	"uri": "/06-css-box-model/css-cascading-guidelines/inheritance/",
	"title": "Inheritance",
	"tags": [],
	"description": "",
	"content": " Inheritance  Certain CSS properties such as font-family, font-size, color will be inherited by child properties\n However, properties such as background color or border properties are not inherited\n Click here to see a full list inherited and non-inherited CSS properties\n  Live Example\nJS Bin on jsbin.com\nIn the example, the p element will automatically inherit the font color property from its ancestor (body) since color is a css property that can be inherited. These inherited styles can easily be overridden if you create css rules that are more specific that change the same property. This was done in the style for p.main where we specified a color property instead of inheriting it from the body element.\n"
},
{
	"uri": "/course-materials/lesson-files/",
	"title": "Lesson Files",
	"tags": [],
	"description": "",
	"content": " Lesson Files  Lesson 00 files (Course Intro \u0026amp; Tools) : No files needed\n Lesson 01 files (HTML Basics)\n Lesson 02 files (Git/Github): No files needed\n Lesson 03 files (Relative Paths)\n Lesson 04 files (CSS Basics)\n Lesson 05 files (CSS Selectors): No files needed\n Lesson 06 files (CSS Box Model)\n Lesson 07 files (Page Layout with Flexbox)\n Lesson 08 files (CSS Positioning, Colors \u0026amp; Background Images)\n Lesson 09 files (Intro to Programming)\n Lesson 10 files (Intro to jQuery)\n Lesson 11 files (Javascript Fundamentals)\n Lesson 12 files (Functions)\n Lesson 13 files (Arrays and Loops)\n Lesson 14 files (Javascript Lab) : No files needed\n Lesson 15 files (Responsive Design)\n Lesson 16 files (Responsive Design Lab)\n Lesson 17 files (Forms)\n  "
},
{
	"uri": "/01-html-basics/tag-overview/body-head-title/",
	"title": "Body, Head &amp; Title",
	"tags": [],
	"description": "",
	"content": " \u0026lt;html\u0026gt;, \u0026lt;body\u0026gt;, \u0026lt;head\u0026gt;, \u0026lt;title\u0026gt; The following tags make up the structure of all web pages\n \u0026lt;html\u0026gt;\n Represents the root (top-level element) of an HTML document, so it is also referred to as the root element\n All other elements must be descendants of this element.\n  \u0026lt;body\u0026gt;\n Everything inside the body tag is shown inside the browser window  \u0026lt;head\u0026gt;\n Contains information about the page (vs shown on the pages\n Title and Links to other files are usually specified in the head element\n  \u0026lt;title\u0026gt;\n Text here is displayed in the top of the browser (or on the tab in Chrome or other browsers that use tabs)   \u0026lt;title\u0026gt; is just one of many tags that can be placed inside of \u0026lt;head\u0026gt;, we\u0026rsquo;ll see more of them as we go through the class, for more information click here\n Example\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- contains information about the page --\u0026gt; \u0026lt;title\u0026gt; Title of the page \u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Main Heading\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Some cool content\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  what is the DOCTYPE? There have been several versions of HTML and because of this each web page should begin with a DOCTYPE declaration to tell a browser which version of HTML the page is using (browsers will still usually display the page even if it is not included).\n "
},
{
	"uri": "/21-class-resources/keyboard-shortcuts/",
	"title": "Keyboard Shortcuts",
	"tags": [],
	"description": "",
	"content": " General Window Management \u0026amp; Browser Shortcuts    Action Mac Windows     Open Chrome Developer Tools cmd+option + i F2 or ctrl + shift + i   Refresh page cmd + R ctrl + R   Switch between applications cmd + tab alt + tab   Switch between windows in the same application cmd + ~     Visual Studio CodeShortcuts Files, Windows, Tabs Management    Command macOS Windows Linux Description     Open Settings Menu cmd+, ctrl+, ctrl+, Opens the Atom\u0026rsquo;s settings menu   Open File (Fuzzy) cmd+p or cmd+t ctrl+p or ctrl+t ctrl+p or ctrl+t Opens the Fuzzy Finder   Browse Open Files cmd+b ctrl+b ctrl+b Browse tabs within the window   Previous Tab alt+cmd+left ctrl+pageup ctrl+pageup Cycles left through open tabs (in the active pane)   Next Tab alt+cmd+right ctrl+pagedown ctrl+pagedown Cycles right through open tabs (in the active page)   Toggle Tree View cmd+\\ ctrl+\\ ctrl+\\ Toggles Atom\u0026rsquo;s file Tree View   Show Available Snippets alt+shift+s alt+shift+s alt+shift+s Shows the snippets available to Visual Studio Code  Save cmd+s ctrl+s ctrl+s Saves the currently active file   Save As shift+cmd+s ctrl+shift+s ctrl+shift+s Saves the currently active file under a different name   Save All alt+cmd+s   Saves all changed files   Close Tab cmd+w ctrl+w ctrl+w Closes the currently active tab   Close Window shift+cmd+w ctrl+shift+w ctrl+shift+w Closes the currently active editor window   Split Window cmd+k up/down/left/right ctrl+k up/down/left/right ctrl+k up/down/left/right Split the currently active tab in one of the four directions   Focus Pane cmd+k cmd+up/down/left/right ctrl+k ctrl+up/down/left/right ctrl+k ctrl+up/down/left/right Move the focus to the pane in one of the four directions   Toggle full screen ctrl+cmd+f F11 F11 Toggle full screen window    Editing    Command macOS Windows Linux Description     Duplicate Lines shift+cmd+d ctrl+shift+d ctrl+shift+d Duplicates the line of the current cursor position and creates a new line under it with the same contents   Delete Line ctrl+shift+k ctrl+shift+k ctrl+shift+k Deletes the current line   Move Line Up ctrl+cmd+up ctrl+up ctrl+up Moves the contents of the current cursor position up one line. If there is a line above with content, the current lines content will swap with the one above it.   Move Line Down ctrl+cmd+down ctrl+down ctrl+down Moves the contents of the current cursor position down one line. If there is a line below with content, the line\u0026rsquo;s content will swap with the one below it.   Find/Replace cmd+f ctrl+f ctrl+f Opens up the Find/Replace panel   Find Next cmd+g F3 F3 Toggles forward through the results of the current buffer in the file while the Find/Replace panel is active   Find Previous shift+cmd+g shift+F3 shift+F3 Toggles backward through the results of the current buffer in the file while the Find/Replace panel is active   Find in Project shift+cmd+f ctrl+shift+f ctrl+shift+f Opens the Find in Project Panel   Go To Line ctrl+g ctrl+g ctrl+g Opens the Go To Line panel   Go To Matching Bracket ctrl+m ctrl+m ctrl+m The cursor goes to the matching top bracket that the cursor is ecapsulated in   Select Line cmd+l ctrl+l ctrl+l Selects the entire line the cursor\u0026rsquo;s current position is in   Toggle Comment cmd+/ ctrl+/ ctrl+/ Toggles the selected text into a comment of the current grammar   Column Selection ctrl+shift+up/down ctrl+alt+up/down shift+alt+up/down Allows to select multiple rows, where the same edit will be applied   Select Same Words cmd+d ctrl+d ctrl+d If you select a word, and then hit the key combo for this command, Visual Studio Codewill select the next same word for you. Then you can either type directly (which will replace the old words) or use left or right arrow to append things.   Undo Selection cmd+u ctrl+u ctrl+u This undoes the previous selection, like from Select Same Words.   Select All The Same Words At Once cmd+ctrl+g alt+f3 alt+f3 This shortcut is similar to cmd+d/ctrl+d but it selects all the matching words at once.    "
},
{
	"uri": "/00-course-intro-and-tools/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Understand what the term \u0026ldquo;Front-End Development\u0026rdquo; means\n Introduce tools you will be using throughout the class\n Cover class logistics, structure \u0026amp; keys to success\n  "
},
{
	"uri": "/10-intro-to-jquery/jquery-in-action/reading-writing-content/val/",
	"title": ".val()",
	"tags": [],
	"description": "",
	"content": " .val()  Allows you to either read (get) or write (set) the value of html elements (documentation)\n This is mainly used to read and write values of form elements such as text fields (input fields)\n  Reading Values  To read (or get) the value of elements using jQuery you need to use the .val() method with nothing between the parentheses   // read the value found in the element .name-field // notice how nothing is in-between the parentheses $(\u0026quot;.name-field\u0026quot;).val();  Example #1 - Reading values using .val()\nJS Bin on jsbin.com\nWriting Values  To write or update the value of elements using jQuery you need to use the .val() and place the new text in-between the parentheses   // Update the value found in .name-field to read \u0026quot;Barney the Purple Dinosaur\u0026quot; // notice how we place \u0026quot;Barney the Purple Dinosaur\u0026quot; in-between the parentheses $(\u0026quot;.name-field\u0026quot;).val(\u0026quot;Barney the Purple Dinosaur\u0026quot;);  Example #2 - Writing values using .val()\nJS Bin on jsbin.com\n"
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-items-properties/align-self/",
	"title": "Align Self",
	"tags": [],
	"description": "",
	"content": " align-self  allows the default alignment (or the one specified by align-items) to be overridden for individual flex items.   .item { align-self: auto | flex-start | flex-end | center | baseline | stretch; } --- Live Example  JS Bin on jsbin.com\n"
},
{
	"uri": "/14-javascript-lab/anonymous-functions/",
	"title": "Anonymous Functions",
	"tags": [],
	"description": "",
	"content": " What are Anonymous Functions? // An anonymous function is a function without a name function(width, height){ return width * height; }; // this function can later be stored as a variable and used later in your code let area = function(width, height){ return width * height; }; // Call anonymous function stored as a variable area(4, 5); // returns 20  When should you use Anonymous Functions?  Use for code that only needs to run once within a task\n Use as an event handlers to perform a task when an event occurs\n  Event handlers are functions that are called when an event is triggered\n Using an anonymous function as an event handler // Uses a *named function* to serve as a event handler (function that is called as a result of an event) $('#blueButton').click(blueEffect); function blueEffect(){ $('body').css('background-color', 'blue'); };  // Results are same as above example, but instead we use an anonymous function as a click handler // This is the common jQuery pattern $('#blueButton').click(function(){ $('body').css('background-color', 'blue'); });  "
},
{
	"uri": "/13-arrays-and-loops/arrays/",
	"title": "Arrays",
	"tags": [],
	"description": "",
	"content": " Arrays  Used to when you are working with a list of values that are related to each other\n Use square brackets to create an array (this is also how you quickly recognize arrays)\n Values in an array are separated by commas\n  Creating an Array  We can store variables just like any other data type\n You can create that doesn\u0026rsquo;t initially contain any values, this is called an empty array\n An array can also be created with initial values\n Square brackets are a means of identifying if a variable is an array\n  // declare a variable as an empty array let numbers = []; // or you can declare an array with initial values let streets = ['Broadway', 'Houston', 'Grand'];  Values in an Array  Values in an array are accessed as if they are in a numbered list\n Arrays are zero based meaning the 1st “value” in an array is at position (index) 0, the 2nd element is at position 1, and so on\n You access the value of an element in the array by passing the index of the item in square brackets\n  let streets = ['Broadway', 'Houston', 'Grand']; // access the 2nd street listed in the array which is at index 1 let streetTwo = streets[1];  Accessing in an Array  You can access a value of an array by referencing its index (i.e. its order within the array)  // declare a variable called chipmunks and use it to store // an array of names let chipmunks = [\u0026quot;Alvin\u0026quot;, \u0026quot;Simon\u0026quot;, \u0026quot;Theodore\u0026quot;]; // reference the first value in the array // here we pass in a zero, since that represents the first // element (value) in an array let bandMember = chipmunks[0]; // the value stored in bandMember is \u0026quot;Alvin\u0026quot;  Changing Values in an Array  You can change a value in an array by referencing the value and then changing the value using an = (equal sign)  // declare a variable called newEditionMembers and use it to store // an array of names let newEditionMembers = [\u0026quot;Ricky Bell\u0026quot;, \u0026quot;Michael Bivins\u0026quot;, \u0026quot;Bobby Brown\u0026quot;, \u0026quot;Ronnie DeVoe\u0026quot;, \u0026quot;Ralph Tresvant\u0026quot;] // We are going replace Bobby Brown with Johnny Gill // by referencing the 3rd element of the array by using index 2 // and then use assignment (just an equal sign) to change // the value to Johnny Gill newEditionMembers[2] = \u0026quot;Johnny Gill\u0026quot;;  Array Examples JS Bin on jsbin.com\nArrays are a flexible and powerful feature of Javascript (and other programming languages as well). Click here for more information about Arrays\n "
},
{
	"uri": "/08-css-positioning-and-colors/background-images/background-repeat/",
	"title": "Background Repeat",
	"tags": [],
	"description": "",
	"content": " background-repeat Property  background-repeat allows you to control how an background image is repeated\n repeat: image is repeated both horizontally and vertically (default behavior)\n repeat-x: image is only repeated horizontally\n repeat-y: image is only repeated vertically\n no-repeat: image is only shown once and not repeated\n   "
},
{
	"uri": "/10-intro-to-jquery/jquery-overview/benefits-of-jquery/",
	"title": "Benefits of jQuery",
	"tags": [],
	"description": "",
	"content": " Benefits of jQuery?  Uses CSS selectors to help us grab or select elements programmatically (i.e. in our code)\n Accomplishes more with less code vs using native Javascript\n  CSS selectors means less code Here\u0026rsquo;s how we would programmatically select an element with an id of \u0026ldquo;flavors\u0026rdquo; using native Javascript\n// selecting an element using native Javascript document.getElementById('flavors').onClick = doSomething();  Here\u0026rsquo;s how we would programmatically select an element with an id of \u0026ldquo;flavors\u0026rdquo; using jQuery\n// using jQuery (same as above but with much more intuitive syntax) $('#flavors').click(doSomething);  In this code snippet above you can see jQuery allows us to use CSS selectors to programmatically select elements on our page\nThe ability to use CSS selectors to programmatically select elements is the main reason jQuery is so popular today\n Another Example Here\u0026rsquo;s another example of how jQuery results in much more clear and readable DOM manipulation logic\nIn this code snippet, we are using native Javascript to programmatically select the \u0026lt;body\u0026gt; element and then change the background color to white\n// selecting an element using native Javascript document.getElementsByTagName('body')[0].style.backgroundColor = 'white';  Compare the snippet above with the following snippet that accomplishes the same result using jQuery\n// using jQuery (same as above but with much more intuitive syntax) $('body').css('backgroundColor', 'white');  Note: best practice is to use camel case when referencing css properties that have multiple words i.e. \u0026lsquo;backgroundColor\u0026rsquo; instead of \u0026lsquo;background-color\u0026rsquo;\n "
},
{
	"uri": "/12-functions/calling-functions/",
	"title": "Calling Functions",
	"tags": [],
	"description": "",
	"content": " Calling a Function  Calling a function means you are using the function (as opposed to defining a function which only tells us what the function can do)\n To call a function you simply write function name followed by parentheses (don’t forget the parentheses!)\n Now you can call this function as many times as you want\n  // define / declare a function named shout() // by itself this doesn't do anything, we must \u0026quot;Call\u0026quot; it // in order to use it function shout() { alert(\u0026quot;HELLO!\u0026quot;); } // Calling the function named shout // we call a function by writing the name // of the function followed by parentheses shout();  JS Bin on jsbin.com\n"
},
{
	"uri": "/11-javascript-fundamentals/code-along-faq/",
	"title": "Code Along - FAQ",
	"tags": [],
	"description": "",
	"content": " Code Along: FAQ (Frequently Asked Questions)  Using Atom, open the folder called faq in your lesson_11_files folder. You will be using these files as starting off point.\n During this exercise, we\u0026rsquo;ll be doing the following:\n We\u0026rsquo;ll use jQuery implement a FAQ often found on a company\u0026rsquo;s support page   "
},
{
	"uri": "/07-page-layout-flexbox/containing-elements/",
	"title": "Containing Elements",
	"tags": [],
	"description": "",
	"content": " Containing Elements  Elements that contain groups of elements\n For example, grouping all of the elements associated with the header in a \u0026lt;div\u0026gt;\n \u0026lt;div\u0026gt; tags are commonly used as containing elements\n  In example the above example, orange lines represent \u0026lt;div\u0026gt; tags\n\u0026lt;div\u0026gt;  Used to group a set of elements together in one block-level box\n \u0026lt;div\u0026gt; element are block-level elements which means they will start on a new line\n  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Sample Page\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; href=\u0026quot;css/styles.css\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- start of header div --\u0026gt; \u0026lt;div id=\u0026quot;header\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;images/logo.gif\u0026quot; alt=\u0026quot;Anish Kapoor\u0026quot; /\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;index.html\u0026quot;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;biography.html\u0026quot;\u0026gt;Biography\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;works.html\u0026quot;\u0026gt;Works\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;contact.html\u0026quot;\u0026gt;Contact\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- end of header div --\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Structure using \u0026lt;div\u0026gt;s  Prior to HTML5, the divs have been the most common way to structure content on page\n Usual ids/classes are used to provide each div with context regarding the type of content div contains\n Above picture is just an example! This structure is not set in stone, use what makes sense for your project\n  \u0026lt;div\u0026gt;s are used to structure pages in logical sections/groups based on your site\u0026rsquo;s layout\n "
},
{
	"uri": "/11-javascript-fundamentals/variables/declaring-variables/",
	"title": "Declaring Variables",
	"tags": [],
	"description": "",
	"content": " Declaring Variables  Variables are created by declaring them\n Use the let keyword to declare a variable\n If you declare a variable without assigning it an initial value, the value of that variable will be undefined\n  // declaring a variable let firstName;  Variables only need to be declared once\n "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-container-properties/display/",
	"title": "Display",
	"tags": [],
	"description": "",
	"content": " display  Defines a flex container\n inline or block depending on the given value\n  .container { display: flex; /* or inline-flex */ }  "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-container-properties/",
	"title": "Flex Container Properties",
	"tags": [],
	"description": "",
	"content": " The upcoming (and awesome) gifs were graciously borrowed from this insightful blog post that covers flexbox\n Flex Container Properties  display\n flex-direction\n flex-wrap\n flex-flow shorthand\n justify-content\n align-items\n align-content\n  "
},
{
	"uri": "/17-forms/form-overview/",
	"title": "Form Overview",
	"tags": [],
	"description": "",
	"content": " What are forms?  Forms allow us to get data from users  How do forms work? Form Structure \u0026lt;form action=\u0026quot;http://www.example.com/subscribe.php\u0026quot; method=\u0026quot;get\u0026quot;\u0026gt; \u0026lt;p\u0026gt;This is where the form controls will appear.\u0026lt;/p\u0026gt; \u0026lt;/form\u0026gt;  Form Attributes  action: Required, the url on the server that will receive the information from the form\n method: Either a get or post\n Use get when the data being sent to server is not senstive information and is relatively small (search form) Use post when sending senstive data and when sending large amounts of data (registration form)   "
},
{
	"uri": "/homework-assignments/assignments/hw-01-online-travel-guide/",
	"title": "HW #1 - Online Travel Guide",
	"tags": [],
	"description": "",
	"content": " Homework #1: Online Travel Guide Create an online travel guide for a travel destination of your choice\nPlease refer to the Homework Submission Github Workflow guide for detailed instructions for starting, completing and submitting Homework Assignments\n Directions:  Review the assignment here\n Fork the following repository: fewd20190715/hw-01-online-travel-guide\n Clone the assignment repository down to your computer\n Work on your assignment and regularly commit your work\n Submit your assignment using a Pull Request\n  "
},
{
	"uri": "/08-css-positioning-and-colors/css-colors/hex-codes/",
	"title": "Hex codes",
	"tags": [],
	"description": "",
	"content": " Hex Codes  colors represented by values for red, green and blue in hexadecimal code  h1 { color: #66cdaa; }  "
},
{
	"uri": "/16-responsive-design-lab/lab-overview/",
	"title": "Lab Overview",
	"tags": [],
	"description": "",
	"content": " Lab: Startup Matchmaker  You have been hired to turn Startup Matchmaker into a fully responsive site  Requirements  Using Atom, open the folder called startup_matchmaker in your lesson_16_files folder. You will be using these files as starting off point.\n Update Startup Matchmaker so the homepage\u0026rsquo;s content is effectively displayed on tablets or below (viewport width: 768px or below)\n  "
},
{
	"uri": "/15-responsive-design/media-queries/media-query-parts/media-features/",
	"title": "Media Features",
	"tags": [],
	"description": "",
	"content": "  @media only screen and (min-width: 576px) { /** add styles here **/ }  Media Feature/Attribute  Media features allows you to specify different viewport attributes and are always expressed in parentheses  @media only screen and (min-width: 768px) { body { /* styles go here */ } p { /* styles go here */ } .some-style { /* styles go here */ } }   The styles in the media query above will only be applied when the viewport width is greater than or equal to 768px  Available Media Query Attributes (Features) The following is a list of Media Features available\n"
},
{
	"uri": "/15-responsive-design/media-queries/media-query-parts/",
	"title": "Media Query Parts",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/15-responsive-design/media-queries/media-query-parts/media-types/",
	"title": "Media Types",
	"tags": [],
	"description": "",
	"content": "  @media only screen and (min-width: 576px) { /** add styles here **/ }  Media Types  Indicates what type of media the query will be using. Screen tells the browser the query will be used by a computer or mobile device\n The only keyword indicates that this query will be only be for the screen media type and no other\n  While we will just be using the screen media type, you can see a list of all available media types here\n "
},
{
	"uri": "/final-projects/milestones-due-dates/",
	"title": "Milestones &amp; Due Dates",
	"tags": [],
	"description": "",
	"content": " Throughout the course you will be providing deliverables that will help keep your final projects on track to be completed on time.\nMilestones    Milestone Due Date     Submit three (3) of project ideas Mon, Apr 15th   Get your project idea approved Mon, Apr 22nd   Create github repository for your final project Wed, Apr 24th   Create and submit wireframes Mon, Apr 29th   Provide a project plan for your final project Mon, Apr 29th   Host your project on Github pages Mon, May 13th   Submit your final project Mon, May 20th    "
},
{
	"uri": "/11-javascript-fundamentals/data-types/numbers/",
	"title": "Numbers",
	"tags": [],
	"description": "",
	"content": " Numbers  Used for tasks involving counting or calculating sums\n Whole numbers (integers) or decimals (floats)\n Numbers can be negative or positive\n Numbers do not have quotes around them\n  There are no commas used when expressing numbers, for example the number 1,750 is expressed as 1750 in Javascript\n JS Bin on jsbin.com\nConverting Strings to Numbers  Sometimes you will find yourself in a position where you need to convert a string to a number\n This happens when you attempt to read numeric values from html (html displays everything as a string)\n Use the parseInt() or parseFloat() methods to accomplish this\n  JS Bin on jsbin.com\n"
},
{
	"uri": "/17-forms/form-elements/password-input/",
	"title": "Password Input",
	"tags": [],
	"description": "",
	"content": " Password Input \u0026lt;form action=\u0026quot;http://www.example.com/login.php\u0026quot;\u0026gt; \u0026lt;p\u0026gt; Username: \u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;username\u0026quot; size=\u0026quot;15\u0026quot; maxlength=\u0026quot;30\u0026quot; /\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; Password: \u0026lt;input type=\u0026quot;password\u0026quot; name=\u0026quot;password\u0026quot; size=\u0026quot;15\u0026quot; maxlength=\u0026quot;30\u0026quot; /\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/form\u0026gt;  Password Input Example Password Input Attributes  type=\u0026ldquo;password\u0026rdquo;: Tells browser input will store sensitive information, block characters from being displayed name: Used by the server to identify which form control that data came from maxlength: (optional) Specifies that max number of characters that can be entered  "
},
{
	"uri": "/10-intro-to-jquery/programming-protips/",
	"title": "Programming Protips",
	"tags": [],
	"description": "",
	"content": " Bugs \u0026amp; errors will always happen and they are a good thing consider them to be Learning Opportunities\n When an error occurs, take the following steps:\n Take deep breath Read the error message (look for clues) Find the source of the error (i.e. which line of code is causing the error) Fix the error  The process of fixing bugs is also referred to as debugging\n    Use your developer console always\n Google is your friend (when you get stuck)\n every bug you encounter has been encountered by many developers before you; chances are highly likely someone has asked a question on Stack Overflow or written a blog post about it the answer is out there!!!!  Use pattern matching\n Use good indentation\n Break things on purpose (after you\u0026rsquo;ve gotten it to work) to answer your what if / what would happen if questions\n ^ just make sure you fix them before turning in your assignments :)  Practice, practice, practice\n Programming requires a different way of thinking, best way to adjust to that new way of thinking is to practice   "
},
{
	"uri": "/15-responsive-design/relative-measurements/rems/",
	"title": "REMs",
	"tags": [],
	"description": "",
	"content": " What are REMs?  Similar to EMs, key difference is how the relative measurement is calculated\n Instead of sizing fonts relative to their parent containers, REM sizes fonts relative to the root view (i.e. )\n This means a lot less math when attempting to calculate the real pixel value\n  Example: REMs in Action\nJS Bin on jsbin.com\nIn the example above, the .green-box element has it\u0026rsquo;s font size set using REM (font-size: 1.4rem). This means that it will be sized relative to the root element ( or ) and NOT it\u0026rsquo;s parent (.red-box element). So as a result\nThis is due to the fact that REMs are calculated relative to root element so in the case of the .green-box element the browser will use the following calculation to determine its font-size in pixels:\n16px * 1.4 = 22.4px  You don\u0026rsquo;t need to set the base font-size on the \u0026lt;html\u0026gt; element because it inherits font-size from the \u0026lt;body\u0026gt; tag by default. Therefore, most developers set the base font-size on the \u0026lt;body\u0026gt; tag\n "
},
{
	"uri": "/10-intro-to-jquery/jquery-in-action/reading-writing-content/",
	"title": "Reading and Writing Content",
	"tags": [],
	"description": "",
	"content": " Reading (getting) \u0026amp; Writing (setting) content  Another common pattern with jQuery (and Dom Manipulation in general) is to programmatically read (get / retrieve) and write (set / update) content to and from our pages.\n The following built-in jQuery methods are frequently used to get and set content:\n .text()\n .val()\n .html()\n  // get the text content stored in an element $('p.intro').text(); // set the content to another value $('p.intro').text('Updated text that will replace existing content');  JS Bin on jsbin.com\nJS Bin on jsbin.com\n"
},
{
	"uri": "/08-css-positioning-and-colors/css-positioning/relative-positioning/",
	"title": "Relative Positioning",
	"tags": [],
	"description": "",
	"content": " Relative Positioning  Moves element in relation to where it would have been in normal flow\n Uses offset properties (top or bottom and left or right) to indicate how far to move the element from where it would have been in normal flow\n Usually accompanied by box offsets: top, right, bottom, left.\n It will not effect the other elements on the page, surrounding elements stay in the position in their normal flow positions\n  If you set position: relative; on an element but no offset attributes (top, left, bottom or right), it will have no effect on it\u0026rsquo;s positioning at all, it will be exactly as it would be if you left it as position: static; But if you DO give it some other positioning attribute, say, top: 10px;, it will shift it\u0026rsquo;s position 10 pixels DOWN from where it would NORMALLY be\n Live Example\nJS Bin on jsbin.com\n"
},
{
	"uri": "/15-responsive-design/responsive-design-overview/examples/",
	"title": "Responsive Design Examples",
	"tags": [],
	"description": "",
	"content": " Examples of Responsive Design  World Wild Life Fund\n Etsy\n Boston Globe\n Shopify\n Slack\n  "
},
{
	"uri": "/15-responsive-design/responsive-design-overview/",
	"title": "Responsive Design Overview",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/19-final-project-presentations/student-projects/",
	"title": "Student Projects",
	"tags": [],
	"description": "",
	"content": "   Student Project     Senecca Bratcher https://sjbrat.github.io/   Paloma Calles https://palomacalles.github.io/   Lauren Farfel https://lfarfel95.github.io/   Allison Gollub https://allisongee.github.io/index.html   Jennifer Gong https://jngong.github.io/   Emilee Lindner https://emilee537.github.io/   Taylor Mckeel https://josephmckeel.github.io/index.html   Karen Ortiz https://kayoh26.github.io/   Sammi Oyeniyi https://soyeniyi801.github.io/   Sarah Shaw https://sarahfshaw.github.io/   Nathan Taylor http://nhtaylor.github.io   Jacy Waldrop https://jbwaldrop01.github.io/   Lauralyn Watson https://lswatson.github.io/    "
},
{
	"uri": "/final-projects/milestones-due-dates/submit-project-ideas/",
	"title": "Submit Project Ideas",
	"tags": [],
	"description": "",
	"content": " Milestone I: Submit Project Ideas  Submit three (3) ideas for your final project\n Deliverable: Use this form to submit your final project ideas\n Due Date: Monday, April 15th\n After which, I\u0026rsquo;ll schedule some time to meet with you to discuss your ideas\n  "
},
{
	"uri": "/15-responsive-design/viewport-meta-tag/viewport-meta-tag/",
	"title": "Viewport Meta Tag",
	"tags": [],
	"description": "",
	"content": " Viewport Meta Tag Add the following to your  element\n This enables use of media queries for cross-device layouts.  \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1\u0026quot;\u0026gt;  More info on the viewport meta tag\nWhat happens if you don\u0026rsquo;t set the viewport?  The example above depicts a website being viewed on a legacy iPhone (320 pixels wide)\n Because the viewport meta tag was not set the mobile browser will automatically assume you want to see the \u0026ldquo;entire\u0026rdquo; page on your smaller screen. As a result it will automatically zoom out to a point where everything is visible.\n This results in a suboptimal reading experience\n  Width  Tells the browser how to scale the web page\n For a responsive site, the value width=device-width tells the browser to render the page at full size, whatever the size may be\n Best practice is to use width=device-width\n  Initial-Scale  Tells the browser how to scale the web page when it’s first loaded on the screen (i.e., the zoom factor)\n initial-scale=1 means that the page will be rendered at the size determined by the width attribute, and will not be zoomed in or out\n If you use a number larger than 1, then the page will be zoomed to that level\n For example, an initial-scale=2 value would mean that the page would be zoomed to be twice as large as actual size, so you would only see half of the page on the screen  initial-scale value only determines the size of the web page when it’s first loaded on the screen. Remember that your mobile device also gives users the ability to zoom in and out\n Best practice is to use initial-scale=1\n  "
},
{
	"uri": "/09-intro-to-programming/what-is-programming/",
	"title": "What is Programming?",
	"tags": [],
	"description": "",
	"content": " What is Programming?  List of instructions that a computer needs in order to complete a task\n Instructions are provided in a programming language that the computer understands\n These set of instructions are commonly referred as source code or a program\n  "
},
{
	"uri": "/21-class-resources/running-local-server/windows/",
	"title": "Windows Instructions",
	"tags": [],
	"description": "",
	"content": " Windows Instructions  Open the Command Prompt application on Windows\n Install python, see the instructions here\n Using the command line navigate to the project folder\nIn the hypothetical example below the project folder is stored in Documents/FEWD/Demos/mapbox_example\nOn your command line you would do the following (do not type \u0026lsquo;$\u0026rsquo;, your text input on the command line should with cd):\n$ cd Documents/FEWD/Demos/mapbox_example  Run python -m SimpleHTTPServer 8000 to start the local server\n Open your browser and navigate http://localhost:8000\n  At this point your project will be displayed in the browser and you will have successfully launched your project on a local server.\nNOTE: To close the server press Ctrl-c to close the server when it is not in use\n"
},
{
	"uri": "/10-intro-to-jquery/jquery-overview/adding-jquery/",
	"title": "Adding jQuery to your projects",
	"tags": [],
	"description": "",
	"content": " There are two ways to add jQuery to your projects  Download the jQuery library file and store it within your project\n Use a CDN (content delivery network) and reference the jQuery library file remotely\n  Option #1 - Download jQuery file(s) This approach assumes you downloaded the jQuery file and stored it on your js folder\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Add jQuery by downloading jQuery file(s)\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script src=\u0026quot;js/jquery-3.4.0.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;js/app.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Option #2 - Use a CDN (Content delivery network) This approach references the jQuery file that lives on a CDN (another server)\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Add jQuery using a CDN\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script src=\u0026quot;https://code.jquery.com/jquery-3.4.0.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;js/app.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Content Delivery Networks (CDNs)  A content delivery network (CDN) places files in different locations so that the person using your webpage can receive the nearest copy of it faster\n Prevents your users\u0026rsquo; browsers from downloading commonly used libraries(like jQuery) every time they visit your site\n Use of CDNs increases page speed for highly trafficked sites\n Click here for a nice overview of CDNs\n  "
},
{
	"uri": "/08-css-positioning-and-colors/css-colors/",
	"title": "CSS Colors",
	"tags": [],
	"description": "",
	"content": " Specifying Colors in CSS Several ways to express colors in CSS\n Color Names Hex Codes RGB RGBa HSL HSLa  "
},
{
	"uri": "/05-css-selectors/",
	"title": "CSS Selectors",
	"tags": [],
	"description": "",
	"content": " Lesson 05 CSS Selectors "
},
{
	"uri": "/05-css-selectors/css-selectors/",
	"title": "CSS Selectors",
	"tags": [],
	"description": "",
	"content": " CSS Selectors Overview  Many different types of selectors that allow you to target rules to specific elements in an HTML document\n Selectors are case sensitive, must match element names and attributes exactly\n     Selector Meaning Example     Universal Selector Applies to all elements *{}   Type Selector Match elements names h1, h2, h3 {}   Class Selector Matches all elements with a class attribute value matching on specified after a period (.) .hint {}, p.hint {}   ID Selector Matches all elements with a id attribute value matching on specified after a hash (#) #offer {}   Child Selector Matches elements that are a direct child of another li \u0026gt; a {}   Descendant Selector Matches element that is a direct descendant of another (not just the child) p a {}   Adjacent Sibling Selector Matches first element that is a sibling of another h1+p {}   General Sibling Selector Matches all elements that is a sibling of another h1~p {}   Attribute Selector Attribute selectors select an element using the presence of a given attribute or attribute value input[type=\u0026quot;email\u0026quot;] {}   Pseudo Class Selector Selector that specifies a special state of the selected element(s) a:visited   Pseudo Element Selector Selector that lets you style a specific part of the selected element(s) p::first-line    A complete list of all CSS Selectors can be found here\n "
},
{
	"uri": "/17-forms/form-elements/",
	"title": "Form Elements",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/15-responsive-design/viewport-meta-tag/",
	"title": "Viewport Meta Tag",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/05-css-selectors/css-selectors-examples/",
	"title": "CSS Selectors Examples",
	"tags": [],
	"description": "",
	"content": " CSS Selectors Examples Class Selector JS Bin on jsbin.com\nID Selector JS Bin on jsbin.com\nChild Selector JS Bin on jsbin.com\nDescendent Selector Descendant Selector Example on jsbin.com\nAdjacent Sibling Selector Adjacent Sibling Selector example on jsbin.com\nGeneral Sibling Selector General Sibling Selector Example on jsbin.com\nPseudo Class Selector JS Bin on jsbin.com\nPseudo Element Selector JS Bin on jsbin.com\n"
},
{
	"uri": "/15-responsive-design/media-queries/",
	"title": "Media Queries",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/15-responsive-design/responsive-design-overview/responsive-design-components/",
	"title": "Responsive Design Components",
	"tags": [],
	"description": "",
	"content": " Two Main Components of Responsive Design  Media Queries\n Flexibility\n  Media Queries  Allow you to use CSS to change the design of the website depending on the width of the device’s screen / viewport  Flexibility  Concept means that our Horizontal measurements on our site need to respond to changes in the size of the screen\n This means:\n Width of columns and other layout elements will be in percentages\n Text will be measured in a relative unit (ems or percentages)\n   "
},
{
	"uri": "/17-forms/styling-forms/",
	"title": "Styling Forms",
	"tags": [],
	"description": "",
	"content": " Tips for Styling Forms  Use border box\n Use reset.css or normalize.css to reduce browser specific quirks\n Read the following:\n Mozilla Network Guide to Styling forms\n CSS Tricks Styling forms\n Code Tuts Styling forms using CSS3\n   "
},
{
	"uri": "/12-functions/working-with-parameters/",
	"title": "Working with Parameters",
	"tags": [],
	"description": "",
	"content": " Declaring Functions that need information  Some functions need additional information in order to perform a specific task\n This additional information is referred to as “parameters”\n To provide parameters to a function, you specify them inside the parentheses after the parameter name\n The parameters are used like variables within the function body\n We use the return keyword when we want our function to \u0026ldquo;give us back\u0026rdquo; a value\n In the case of the example we want the function to return the result of the multiplying the width times the height   Examples // define a function called getArea() // that accepts two parameters width \u0026amp; height // we MUST use the return keyword if we // want the function to give us back a value function getArea(width, height) { return width * height; } // Calling the getArea() function with values getArea(7, 5); // returns 35 // Calling the getArea() function again but this time with variables var doorWidth = 2; var doorHeight = 8; getArea(doorWidth, doorHeight); // returns 16  JS Bin on jsbin.com\n"
},
{
	"uri": "/10-intro-to-jquery/jquery-overview/jquery-syntax/",
	"title": "jQuery syntax using $() function",
	"tags": [],
	"description": "",
	"content": " $() function  jQuery uses a built-in function called jQuery() to allow developers to programmatically select elements on a html page\n $() is shorthand for jQuery()\n This shorthand syntax is used almost exclusively (because results in less typing) and that is what we will be using throughout the course   // programmatically \u0026quot;select\u0026quot; all p tags on the page using jQuery() syntax jQuery('p') // programmatically \u0026quot;select\u0026quot; all p tags on the page using the $() shorthand syntax; most widely used approach $('p')  Example\n// Use jQuery to \u0026quot;select\u0026quot; an element with an id of main and listen for a click event $(\u0026quot;#main\u0026quot;).click(doSomething)  "
},
{
	"uri": "/06-css-box-model/",
	"title": "CSS Box Model",
	"tags": [],
	"description": "",
	"content": " Lesson 06 CSS Box Model "
},
{
	"uri": "/08-css-positioning-and-colors/css-positioning/",
	"title": "CSS Positioning",
	"tags": [],
	"description": "",
	"content": " CSS Positioning Positioning allows you to take elements out of the normal document layout flow, and make them behave differently; for example sitting on top of one another, or always remaining in the same place inside the browser viewport\nWe\u0026rsquo;ll discuss the following positioning types:\n Static Positioning Relative Positioning Absolute Positioning Fixed Positioning  "
},
{
	"uri": "/04-css-basics/code-along/",
	"title": "Code Along - About Me",
	"tags": [],
	"description": "",
	"content": " Code Along: Building an \u0026ldquo;About Me\u0026rdquo; page  As a class, we\u0026rsquo;ll walk through using html and css to build the \u0026ldquo;About Me\u0026rdquo; page depicted in the image below   Using Atom, open the folder called rocket_raccoon_about_me in your lesson_04_files folder. You will be using these files as starting off point.\n When building websites it is a best practice to have a plan in place before starting out. One popular planning tool is called a wireframe.\n Wireframes are low fidelity drawings that help you visualize the layout of your pages. We\u0026rsquo;ll talk about wireframes more in depth throughout the course.\n For this exercise we\u0026rsquo;ll be using the wireframe below to help guide is build out the About Me page:\n  "
},
{
	"uri": "/17-forms/code-along-contact-us-form/",
	"title": "Code Along - Contact Us Form",
	"tags": [],
	"description": "",
	"content": " Code Along: Build a Contact Us Form  Using Atom, open the folder called contact_us_form in your lesson_17_files folder. You will be using these files as starting off point.\n As a class, we\u0026rsquo;ll build and design form a contact us form\n  "
},
{
	"uri": "/01-html-basics/code-along/",
	"title": "Code Along - GA Press Release",
	"tags": [],
	"description": "",
	"content": " Code Along: GA Press Release  As a class, we\u0026rsquo;ll walk through using html to build out an html version of a press release\n Using Sublime, open the folder called ga_press_release (found within the starter_code) folder\n  "
},
{
	"uri": "/10-intro-to-jquery/jquery-overview/document-ready/",
	"title": "Document Ready Function",
	"tags": [],
	"description": "",
	"content": " Document Ready Function  jQuery (and native Javascript) must wait for a page to be loaded before it can try to dynamically update a page (i.e. Manipulate the page\u0026rsquo;s DOM)  We can also avoid this issue by adding the \u0026lt;script\u0026gt; tag (the tag we used to link our .js files to our .html files) at the bottom of your html pages right before the closing \u0026lt;\\body\u0026gt; tag\n  jQuery provides a \u0026ldquo;document ready\u0026rdquo; function that will run once the DOM is fully loaded\n There are two ways to express the \u0026ldquo;document ready\u0026rdquo; function for jQuery\n  Option #1: Long form syntax $(document).ready(function(){ // place your code here // jQuery code must be placed inside of a document ready block })  Option #2: Short form alternative syntax $(function(){ // this is the same as the $(document).ready(function(){}) function // just much less code // place your code here });  There are no advantages to choosing one syntax over the other. However, option #2 is less typing :)\n "
},
{
	"uri": "/04-css-basics/lab/",
	"title": "Lab - Portfolio page",
	"tags": [],
	"description": "",
	"content": " Lab: Start/Complete Portfolio Page  Individually or in teams to finish the fictional developer\u0026rsquo;s site by building out their portfolio page (depicted in the image below)\n You will be adding a Portfolio page to your existing rocket_raccoon_about_me project\n Timebox: 35 mins\n Before you start building: Draw a wireframe of the layout to help you plan your approach\n The \u0026ldquo;About Me\u0026rdquo; and \u0026ldquo;Porfolio\u0026rdquo; pages should be linked using a relative url\n  "
},
{
	"uri": "/06-css-box-model/box-model-overview/",
	"title": "CSS Box Model",
	"tags": [],
	"description": "",
	"content": " CSS Box Model  Understanding the CSS Box Model is key to understanding how CSS works\n Going forward, you should view every element as a box (because that\u0026rsquo;s how browsers view them)\n   Block elements in the image are outlined in red, while inline elements are outlined in green\n Every element is a box, some boxes contain other boxes \u0026lt;body\u0026gt;, \u0026lt;div\u0026gt; or \u0026lt;article\u0026gt;\n CSS allows you to create rules the control each individual box\n   tags are examples of block elements-- , , , -- Box Model consists of:  Margin\n Padding\n Border\n  "
},
{
	"uri": "/12-functions/code-along-geometry-calculator/",
	"title": "Code Along - Geometry Calculator",
	"tags": [],
	"description": "",
	"content": " Code Along: Geometry Calculator  Using Atom, open the folder called geometry_calculator in your lesson_12_files folder. You will be using these files as starting off point.\n During this exercise, we\u0026rsquo;ll be doing the following:\n We\u0026rsquo;ll use javascript to implement an app that calculates geometry functions   "
},
{
	"uri": "/05-css-selectors/exercise-css-diner/",
	"title": "Exercise - CSS Diner",
	"tags": [],
	"description": "",
	"content": " Exercise: CSS Diner During this exercise, you\u0026rsquo;ll go through an interactive tutorial focused on learning the different CSS Selectors\n Complete the interactive tutorial found here\n Timebox: 25 mins\n  "
},
{
	"uri": "/01-html-basics/lab/",
	"title": "Lab - Cookie Recipe",
	"tags": [],
	"description": "",
	"content": " Lab: Cookie Recipe  Work individually or in teams to create an html version of a Cookie recipe depicted in the images below\n Using Atom, open the folder called cookie_recipe in your lesson_01_files folder. You will be using these files as starting off point.\n Tips\n Focus on the content first, then the image then the CSS There will be some items that you will need to look up, CSS is one of them (don\u0026rsquo;t worry we will be going over this in the next class, but part of being a developer is being able to google your way to solutions)   "
},
{
	"uri": "/07-page-layout-flexbox/",
	"title": "Page Layout with Flexbox",
	"tags": [],
	"description": "",
	"content": " Lesson 07 Page Layout with Flexbox "
},
{
	"uri": "/14-javascript-lab/this/",
	"title": "$(this)",
	"tags": [],
	"description": "",
	"content": " $(this)  this one of the most misunderstood concepts in javascript this (pure javascript) refers to the owner of a function $(this) (jquery) gives you reference to uses jQuery to select the current element  Example of $(this) in use // Event that makes the \u0026lt;p\u0026gt; element disappear when it is clicked $('p').click(function(){ // $(this) refers to the jQuery element, $(p), that // the click event was called on // Tell the \u0026lt;p\u0026gt; element to hide itself $(this).hide(); });  JS Bin on jsbin.com\nActive Link Example using $(this)  The following is example of how a developer could go using javascript to implement an \u0026ldquo;active link\u0026rdquo; effect  JS Bin on jsbin.com\n"
},
{
	"uri": "/10-intro-to-jquery/jquery-in-action/reading-writing-content/html/",
	"title": ".html()",
	"tags": [],
	"description": "",
	"content": " .html() TBD\n"
},
{
	"uri": "/08-css-positioning-and-colors/css-positioning/absolute-positioning/",
	"title": "Absolute Positioning",
	"tags": [],
	"description": "",
	"content": " Absolute Positioning  This type of positioning takes box out of normal flow\n Other elements act as if the absolutely positioned element is not longer there\n Box offset properties (top or bottom and left or right) are used to position the element\n Elements positioned absolutely will be positioned relative to the nearest positioned parent element\n  Remember that these values will be relative to the next parent element with relative (or absolute) positioning. If there is no such parent, it will default all the way back up to the  element itself meaning it will be placed relatively to the page itself.\n Live Example - Containing element is \u0026ldquo;positioned\u0026rdquo;\nJS Bin on jsbin.com\nIn the example above, the containing element (box with blue border) is considered positioned because it has the following style applied to it: position: relative. This means that the absolutely positioned box (red box) will be absolutely positioned relative to the bounds of the containing element (box with blue border)\nAnother Live Example - Containing element is NOT \u0026ldquo;positioned\u0026rdquo;\nJS Bin on jsbin.com\nIn the example above, the containing element (box with blue border) is NOT positioned because it does not have a position property set (we commented. When this is the case, the absolutely positioned box (red box) will be absolutely positioned relative to the bounds of the entire page (or the screen). This is why the red box is no longer bounder to the containing element (box with blue border).\nAnother Example with two (2) containing elements\nJS Bin on jsbin.com\n"
},
{
	"uri": "/08-css-positioning-and-colors/background-images/",
	"title": "Background Images",
	"tags": [],
	"description": "",
	"content": "Properties of Background of Image\n background-image Property background-repeat Property background-position Property  "
},
{
	"uri": "/08-css-positioning-and-colors/background-images/background-position/",
	"title": "Background Position",
	"tags": [],
	"description": "",
	"content": " background-position Property  Used to position an image\n This property has two values\n horizontal position\n vertical position\n   body { /* this image will be applied to the entire page */ background-image: url(\u0026quot;images/cool-background-image.gif\u0026quot;); background-repeat: no-repeat; background-position: center top; }   If you only specify one value, the second value will default to center\n You can also you pixels or percentages\n They will represent the distance from the top left corner of the window (or the containing box) top left corner is 0% 0%\n   .container { /* this image will be applied to the entire page */ background-image: url(\u0026quot;images/some-other-image.png\u0026quot;); background-repeat: no-repeat; background-position: 10px 30px; }  Live Example\nJS Bin on jsbin.com\n"
},
{
	"uri": "/11-javascript-fundamentals/data-types/booleans/",
	"title": "Booleans",
	"tags": [],
	"description": "",
	"content": " Booleans  Can only have a value of true or false\n true/false are special keywords in javascript and do not have quotes around them\n  // declare a variable called isOn and assign a value of true let isOn = true; // declare a variable called isWarm let isWarm; // assign a value of false to isWarm isWarm = false;   Booleans are useful for helping our programs make decisions (when used with conditionals, comparison \u0026amp; logical operators)\n Booleans also helps a program known when it should stop/start looping\n  "
},
{
	"uri": "/15-responsive-design/media-queries/breakpoints/",
	"title": "Breakpoints",
	"tags": [],
	"description": "",
	"content": " What are Breakpoints?  Term used to describe that specific widths (or points) where your CSS styles change as a result of a media queries   @media only screen and (min-width: 768px) { /* styles go here */ }  The example above, the styles inside the media query will go into effect at the point where the viewport width is greater than or equal to 768px\nExample of CSS stylesheet with media queries  /* styles outside of the media queries are considered default styles */ .some-style { } .some-other-style { } @media only screen and (min-width: 576px) { /* styles go here */ } @media only screen and (min-width: 768px) { /* styles go here */ } @media only screen and (min-width: 992px) { /* styles go here */ } @media only screen and (min-width: 1200px) { /* styles go here */ } @media only screen and (min-width: 1200px) and (orientation: landscape) { /* styles go here */ }  "
},
{
	"uri": "/course-materials/code-demos/carousels/",
	"title": "Carousels with Slick",
	"tags": [],
	"description": "",
	"content": " Overview Slick is a Javascript plugin that makes it easy to carousels to your project.\nDemo Application Summary This application uses Slick to create a simple carousels of 80\u0026rsquo;s cartoons cover art.\ndownload 80\u0026rsquo;s Cartoons Carousel\n"
},
{
	"uri": "/18-final-projects-lab/code-along-host-github-pages/",
	"title": "Code Along - Host Final Project on Github Pages",
	"tags": [],
	"description": "",
	"content": " Github Pages  Free service from Github that allows developers to host websites in the cloud\n We will be using Github Pages to host your final projects\n  Instructions As a class we will follow the instructions found in the link below to host our Final Projects in the cloud:\ninstructions\n"
},
{
	"uri": "/06-css-box-model/code-along-tags-and-boxes/",
	"title": "Code Along - Tags and Boxes",
	"tags": [],
	"description": "",
	"content": " Code Along: Tags \u0026amp; Boxes  Using Atom, open the folder called tags_boxes in your lesson_06_files folder. You will be using these files as starting off point.\n As a class, we\u0026rsquo;ll walk through seeing examples of the box model in action\n  "
},
{
	"uri": "/10-intro-to-jquery/dom-intro/",
	"title": "Document Object Model",
	"tags": [],
	"description": "",
	"content": " Document Object Model (DOM)  Browsers view our webpages as documents\n Programming interface for HTML documents\n The DOM allows us to use a programming language (Javascript) to make dynamic changes to our web pages  Using Javascript to dynamically change our web pages is also referred to as manipulating the DOM\n  Example: Visual representation of the DOM\nIn the image above, we have a html document on the left and a visual representation of this page\u0026rsquo;s DOM on the right\nClick here for a good overview of the DOM\n "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-container-properties/flex-direction/",
	"title": "Flex Direction",
	"tags": [],
	"description": "",
	"content": " flex direction  Establishes the main-axis and defines the direction flex items are placed in the flex container\n Determines whether the flex items are layed out as either horizontal rows or vertical columns\n  .container { flex-direction: row | row-reverse | column | column-reverse; }  "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-items-properties/",
	"title": "Flex Items Properties",
	"tags": [],
	"description": "",
	"content": " Flex Item Properties  align-self\n order\n flex-wrap\n flex-basis\n flex-grow\n flex-shrink\n flex shorthand\n  "
},
{
	"uri": "/final-projects/milestones-due-dates/get-idea-approved/",
	"title": "Get Idea Approved",
	"tags": [],
	"description": "",
	"content": " Milestone II: Get Final Project Idea Approved Details TBD\n Due Date: Monday, April 22nd  "
},
{
	"uri": "/course-materials/code-demos/getting-data-from-other-services/giphy-api/",
	"title": "Giphy Search API",
	"tags": [],
	"description": "",
	"content": " Demo Application Summary This application uses the Giphy API to display a list of gifs associated with a search term submitted into the search field\ndownload Giphy Search Application\nSetup Instructions  Sign up for a Giphy Developer account\n Download the demo application and save files in your class folder\n Add your Access Token to app.js on line 31\n Run a Local Server on your computer (Required!) Using the command line, navigate to the project folder (from Step #2 above) and start a local server\n Open up your browser and type the following address into the address bar: http://localhost:8000\n  "
},
{
	"uri": "/homework-assignments/assignments/hw-02-relaxr-project/",
	"title": "HW #2 - Relaxr Project",
	"tags": [],
	"description": "",
	"content": " Homework #2: Relaxr Project Create a landing page and blog for an up and coming startup client.\nPlease refer to the Homework Submission Github Workflow guide for detailed instructions for starting, completing and submitting Homework Assignments\n Directions:  Review the assignment here\n Fork the following repository: fewd20190715/hw-02-relaxr-project\n Clone the assignment repository down to your computer\n Work on your assignment and regularly commit your work\n Submit your assignment using a Pull Request\n  "
},
{
	"uri": "/08-css-positioning-and-colors/lab-fashion-blog-2/",
	"title": "Lab - Fashion Blog II",
	"tags": [],
	"description": "",
	"content": " Lab: Fashion Blog II  Using Atom, open the folder called fashion_blog_part_II in your lesson_08_files folder. You will be using these files as starting off point.\n Work in teams to update the layout for the fashion blog site, the end result of your update should closely resemble the image below:\n We have provided you with a finished version of Fashion Blog part I, please use these files for the lab\n   Before you start building:\n Draw a wireframe of the layout Identify your flex containers Idenitfy your nested flex containers  Timebox: 35 mins\n  "
},
{
	"uri": "/18-final-projects-lab/lab-final-projects/",
	"title": "Lab - Final Projects",
	"tags": [],
	"description": "",
	"content": " Lab  Work on your final project\n At this point you should only be adding finishing touches (fine tuning CSS, fixing indentation, etc)\n You should avoid adding new features at this point\n  "
},
{
	"uri": "/14-javascript-lab/lab-overview/",
	"title": "Lab Overview",
	"tags": [],
	"description": "",
	"content": " Lab: Weather Appliction  You will build a Weather Application that converts a Celsius temperature input by a user to Fahrenheit and changes the background image according to the weather.  Requirements  Application will take Celsius temperature (via user input) and convert it to Fahrenheit Application will change the background image of the page to match the new temperature  Please Note: The layout and \u0026ldquo;look and feel\u0026rdquo; of the application is totally up to you as long as you meet the requirements above\n"
},
{
	"uri": "/13-arrays-and-loops/looping-through-arrays/",
	"title": "Looping through Arrays",
	"tags": [],
	"description": "",
	"content": " Loops and Iteration  Loops offer a quick and easy way to do something repeatedly  Javascript offers many different ways to loop, click here for more information\n Using .forEach() (native javascript)  Native javascript offers a .forEach() method loops through (iterates) an array  let fruits=[“Banana”,”Apple”,”Pear”]; fruits.forEach(function(element,index){ console.log(element,index); });  JS Bin on jsbin.com\nclick here for more information about the forEach() loop\n Using $.each() (jQuery)  jQuery also provides a way to iterate arrays through its $.each() method  let fruits=[“Banana”,”Apple”,”Pear”]; $.each(fruits, function(index, element){ console.log(index, element); });  JS Bin on jsbin.com\nclick here for more information about the jQuery\u0026rsquo;s $.each() loop\n "
},
{
	"uri": "/16-responsive-design-lab/milestone-1/",
	"title": "Milestone #1",
	"tags": [],
	"description": "",
	"content": "Follow the steps below to complete Milestone #1:\nIn groups:\n Create wireframes (sketches) of your proposed layout for mobile version (tablet and below) of the Startup Matchmaker landing page  Some things to think about:\n Will you need to hide menus?\n What content should be featured on a narrow screen?\n  Time box: 15 minutes\n"
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-items-properties/order/",
	"title": "Order",
	"tags": [],
	"description": "",
	"content": " Controls the order in which flex-items appear in the flex container\n Lower values are listed first (-1 will be listed before 2)\n If no order is set on a flex-item it will have a default value of 0\n   .item { order: \u0026lt;integer\u0026gt;; }  Live Example\nJS Bin on jsbin.com\nIn the example above we are applying order: -1 to the red box (.three) which results in it being listed first among the other flex-items even though in our html it was listed last.\n"
},
{
	"uri": "/15-responsive-design/relative-measurements/percentages/",
	"title": "Percentages",
	"tags": [],
	"description": "",
	"content": " Percentages  Percentages are a relative unit of measurement similar to EMs\n When you size elements based on percentages the resulting size will be relative to that element\u0026rsquo;s parent\n The default font-size in percentages is 100%\n Can also be used instead of EMs\n  Example: Percentage in action\nJS Bin on jsbin.com\nIn the example above you will see that the % measurements for the .red-box and .green-box elements are relative to the .big-box element (i.e. their parent)\n"
},
{
	"uri": "/15-responsive-design/progressive-enhancement/",
	"title": "Progressive Enhancement",
	"tags": [],
	"description": "",
	"content": " What is progressive enhancement?  Design for the most narrow screens first then work your way up to larger screens\n Also referred to as Mobile-first design\n See this article for information on progressive enhancement\n  "
},
{
	"uri": "/09-intro-to-programming/pseudocode/",
	"title": "Pseudocode",
	"tags": [],
	"description": "",
	"content": " Pseudocode  Process of writing a program without using the syntax of a programming language\n Mixture of natural language and high-level programming concepts\n There is no standard way to write pseudocode, use langauge that can be understood by technical and non-technical people\n Use pseudocode as an \u0026ldquo;outline\u0026rdquo; for your real code\n  "
},
{
	"uri": "/08-css-positioning-and-colors/css-colors/rgb/",
	"title": "RGB",
	"tags": [],
	"description": "",
	"content": " RGB  colors represented by values for red, green and blue expressed as numbers between 0 and 255  h1 { color: rgb(102, 205, 170); }  "
},
{
	"uri": "/21-class-resources/atom-editor-settings/",
	"title": "Recommended Visual Studio CodeEditor Settings",
	"tags": [],
	"description": "",
	"content": " All of the settings below can be accessed using the following steps:\n Mac: cmd + , -\u0026gt; Editor PC: ctrl + , -\u0026gt; Editor  Setting indentation levels / default tab-size During our course we will be using a set indentation level of 2 spaces (1 indentation level = 2 spaces). Visual Studio Codemakes it easy conform to this approach by setting our tab to a set level of indentation.\nAfter updating this setting, pressing the tab key will represent one level of indentation which will translate to 2 spaces.\nDisplaying indentation guides Displaying the indentation guide provides a visual way of helping you ensure your indentation levels are correct\nSetting wordwrap Wordwrap ensures that long lines in your code are automatically wrapped to the next line. This improves readability of your code.\n"
},
{
	"uri": "/07-page-layout-flexbox/semantic-elements/",
	"title": "Semantic Elements",
	"tags": [],
	"description": "",
	"content": " Structure using Semantic tags  Similar to \u0026lt;div\u0026gt;s, semantic tags are container elements\n HTML5 introduced semantic tags that directly communicate type of content the container element contains\n Important note: incorrect use of the tags will not result in any errors (but may be confusing for your teammates)\n There are rougly 100 semantic elements\n Above picture is just an example! This structure is not set in stone, use what makes sense for your project\n  Make sure you distinguish between \u0026lt;head\u0026gt; and \u0026lt;header\u0026gt;, they are not the same\n Benefits of Using Semantic Elements  Search engines will consider its contents as important keywords to influence the page\u0026rsquo;s search rankings (see SEO)\n Screen readers can use it as a signpost to help visually impaired users navigate a page\n Finding blocks of meaningful code is significantly easier than searching though endless divs with or without semantic or namespaced classes\n Suggests to the developer the type of data that will be populated Semantic naming mirrors proper custom element/component naming\n  This blog post does a good job describing Semantic Elements.\n "
},
{
	"uri": "/12-functions/single-responsibility-principle/",
	"title": "Single Responsibility Principle",
	"tags": [],
	"description": "",
	"content": " Single Responsibility Principle (SRP)  SRP is a programming best practice that advocates modular code\n Put another way, your programs should be broken up in such a way where each part is responsible for only one \u0026ldquo;thing\u0026rdquo; or domain\n SRP is often applied to functions\n  Applying SRP to Functions  This concepts calls for your functions to only be \u0026ldquo;responsible\u0026rdquo; for one thing\n Often you\u0026rsquo;ll find that the logic in your functions are doing too much (for example: making calculations AND displaying the result to the screen)\n In these cases you should break out those multiple responsibilities into multiple functions\n This is what we did in the Geometry Calculator code along\n  "
},
{
	"uri": "/17-forms/form-elements/text-area/",
	"title": "Text Area",
	"tags": [],
	"description": "",
	"content": " Text Area \u0026lt;form action=\u0026quot;http://www.example.com/comments.php\u0026quot;\u0026gt; \u0026lt;p\u0026gt;What did you think of FEWD?\u0026lt;/p\u0026gt; \u0026lt;textarea name=\u0026quot;comments\u0026quot; cols=\u0026quot;20\u0026quot; rows=\u0026quot;4\u0026quot;\u0026gt;Enter your comments...\u0026lt;/textarea\u0026gt; \u0026lt;/form\u0026gt;  Text Area Example Text Area Attributes  col: Controls number of columns rows: Controls number of rows  "
},
{
	"uri": "/11-javascript-fundamentals/variables/updating-variables/",
	"title": "Updating Variables",
	"tags": [],
	"description": "",
	"content": " Updating Variables  We can provide variables with a value by updating a value to the variable\n An = (equal sign) is used to assign a value to variable\n This process of updating/changing variable\u0026rsquo;s value is also referred to as assigning a value to a variable\n  // declaring a variable let firstName; // assigning a value to the variable firstName = \u0026quot;Cletus\u0026quot;;  Declaring \u0026amp; Assigning Variables in one step  We can both declare and assign variables in one step\n This would be done if the developer wanted to set the initial value of the variable\n  // declare and assign an intial value to a variable let score = 0;  Changing the value of a Variable after an initial value has already been assigned  In this case we will still use a single = (equal sign) to change or reassign a value of a variable   // declare and assign a value of 0 to the score variable let score = 0; // changing the value of the score variable from 0 to 3 score = 3;  "
},
{
	"uri": "/11-javascript-fundamentals/variables/",
	"title": "Variables",
	"tags": [],
	"description": "",
	"content": " What are Variables?\n Declaring Variables\n Updating Variables\n Naming Rules for Variables\n let vs var\n const\n  "
},
{
	"uri": "/12-functions/code-along-hilo/",
	"title": "Code Along - HiLo",
	"tags": [],
	"description": "",
	"content": " Code Along: HiLo  Using Atom, open the folder called hilo in your lesson_12_files folder. You will be using these files as starting off point.\n During this exercise, we\u0026rsquo;ll be doing the following:\n We\u0026rsquo;ll use javascript to implement a guessing game   "
},
{
	"uri": "/06-css-box-model/code-along-notifications/",
	"title": "Code Along - Notifications",
	"tags": [],
	"description": "",
	"content": " Code Along: Notifications  Using Atom, open the folder called notifications in your lesson_06_files folder. You will be using these files as starting off point.\n As a class, we\u0026rsquo;ll see examples of using classes and ids to style notifications that are often used to provide contextual information to users within an application\n  "
},
{
	"uri": "/12-functions/lab-hilo/",
	"title": "Lab - HiLo",
	"tags": [],
	"description": "",
	"content": " Lab: Complete HiLo  Form groups and work together to complete the HiLo application\n Instructions: Add the following functionality\n The secret number should be randomly generated\n Players should be limited to only 5 guesses\n If the player reaches 5 guesses without guessing the correct number then an error message with appear\n The game should reset after 5 guesses has been reached or after the secret number has been correctly guessed\n   Tips:  Write pseudocode before diving in What new variables will you need, if any? What new functions do you think you will need? Remember these are like actions for you program.  "
},
{
	"uri": "/08-css-positioning-and-colors/",
	"title": "CSS Positioning, Colors, Background Images",
	"tags": [],
	"description": "",
	"content": " Lesson 08 CSS Positioning, Colors \u0026amp; Background Images "
},
{
	"uri": "/09-intro-to-programming/",
	"title": "Intro to Programming",
	"tags": [],
	"description": "",
	"content": " Lesson 09 Intro to Programming "
},
{
	"uri": "/08-css-positioning-and-colors/css-positioning/z-index/",
	"title": "z-index",
	"tags": [],
	"description": "",
	"content": " Z-index  If boxes do overlap, the elements that appear later in the HTML code sit on top of those that are earlier in the page\n Z-index allows you to control which elements appear on top when elements overlap\n  .positioned { position: absolute; top: 30; left: 50; z-index: 10; }   z-index property accepts a number, the higher the number, the closer that element will be to the front  Live Example\nJS Bin on jsbin.com\n"
},
{
	"uri": "/10-intro-to-jquery/",
	"title": "Intro to jQuery",
	"tags": [],
	"description": "",
	"content": " Lesson 10 Intro to jQuery "
},
{
	"uri": "/15-responsive-design/relative-measurements/",
	"title": "Relative Measurements",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/course-materials/solutions/",
	"title": "Classwork &amp; Lab Solutions",
	"tags": [],
	"description": "",
	"content": " Solutions Disclaimer: These files are not meant to be viewed as the \u0026ldquo;right answer, instead view them as a way to learn how another developer approached the same problem.\n Lesson 01: HTML Basics  GA Press Release Solution Cookie Receipe Solution  Lesson 03: Relative Paths  Relative Paths Exercise Solution  Lesson 04: CSS Basics  Rocket Raccoon About Me Solution  Lesson 06: CSS Box Model  Fashion Blog Solution  Lesson 07: Page Layout with Flexbox  Layout Challenge Solution  Lesson 08: CSS Positioning, Colors \u0026amp; Background Images  Fashion Blog II: TBD  Lesson 09: Intro to Programming  Color Scheme Switcher Solution (native Javascript) Traffic Light Solution (native Javascript)  Lesson 10: Intro to jQuery  Color Scheme Switcher Solution (jQuery) jQuery DOM Selector Practice Solution  Lesson 11: Javascript Fundamentals  FAQ Solution Score Keeper Solution Blackout Solution Compare That Solution  Lesson 12: Functions  Geometry Calculator Solution Hilo Solution  Lesson 13: Arrays \u0026amp; Loops  Rock, Paper, Scissors Solution  Lesson 15: Responsive Design  Responsive Marketing Layout Solution  Lesson 16: Responsive Design Lab  Startup Matchmaker Responsive Solution  Lesson 17: Forms  Contact Us Form Solution  "
},
{
	"uri": "/01-html-basics/tag-overview/text/",
	"title": "Text",
	"tags": [],
	"description": "",
	"content": " HTML Headings  Six (6) levels of headings h1 tags is used for main headings h2 tags are used for subheadings Remaining level headings used as needed based on your content hierarchy  Browsers display headings differently, but relative sizes will always be consistent (by default) - i.e. h1 will always be bigger than h2\n JS Bin on jsbin.com\nParagraphs  Use \u0026lt;p\u0026gt; element to display paragraphs\n By default, browser displays each paragraph on a new line\n  JS Bin on jsbin.com\n"
},
{
	"uri": "/10-intro-to-jquery/jquery-in-action/adding-new-elements/",
	"title": "Adding New Elements using Append/Prepend",
	"tags": [],
	"description": "",
	"content": " Adding New Elements using append() and prepend() Using methods like .prepend() and .append() you can dynamically add elements to html to your pages\nJS Bin on jsbin.com\n"
},
{
	"uri": "/11-javascript-fundamentals/data-types/arrays/",
	"title": "Arrays",
	"tags": [],
	"description": "",
	"content": " Arrays  Used to when you are working with a list of values that are related to each other\n Use square brackets to create an array (this is also how you quickly recognize arrays)\n Values in an array are separated by commas\n  Creating an Array  We can store variables just like any other data type\n You can create that doesn\u0026rsquo;t initially contain any values, this is called an empty array\n An array can also be created with initial values\n Square brackets are a means of identifying if a variable is an array\n  // declare a variable as an empty array let numbers = []; // or you can declare an array with initial values let streets = ['Broadway', 'Houston', 'Grand'];  Values in an Array  Values in an array are accessed as if they are in a numbered list\n Arrays are zero based meaning the 1st “value” in an array is at position (index) 0, the 2nd element is at position 1, and so on\n You access the value of an element in the array by passing the index of the item in square brackets\n  let streets = ['Broadway', 'Houston', 'Grand']; // access the 2nd street listed in the array which is at index 1 let streetTwo = streets[1];  Accessing in an Array  You can access a value of an array by referencing its index (i.e. its order within the array)  // declare a variable called chipmunks and use it to store // an array of names let chipmunks = [\u0026quot;Alvin\u0026quot;, \u0026quot;Simon\u0026quot;, \u0026quot;Theodore\u0026quot;]; // reference the first value in the array // here we pass in a zero, since that represents the first // element (value) in an array let bandMember = chipmunks[0]; // the value stored in bandMember is \u0026quot;Alvin\u0026quot;  Changing Values in an Array  You can change a value in an array by referencing the value and then changing the value using an = (equal sign)  // declare a variable called newEditionMembers and use it to store // an array of names let newEditionMembers = [\u0026quot;Ricky Bell\u0026quot;, \u0026quot;Michael Bivins\u0026quot;, \u0026quot;Bobby Brown\u0026quot;, \u0026quot;Ronnie DeVoe\u0026quot;, \u0026quot;Ralph Tresvant\u0026quot;] // We are going replace Bobby Brown with Johnny Gill // by referencing the 3rd element of the array by using index 2 // and then use assignment (just an equal sign) to change // the value to Johnny Gill newEditionMembers[2] = \u0026quot;Johnny Gill\u0026quot;;  Array Examples JS Bin on jsbin.com\nArrays are a flexible and powerful feature of Javascript (and other programming languages as well). Click here for more information about Arrays\n "
},
{
	"uri": "/08-css-positioning-and-colors/background-images/background-image-examples/",
	"title": "Background Image Examples",
	"tags": [],
	"description": "",
	"content": " Background Image examples  Using Atom, open the folder called background_image_examples in your lesson_08_files\n We walk through live examples of background image in action\n  "
},
{
	"uri": "/08-css-positioning-and-colors/background-images/background-size/",
	"title": "Background Size",
	"tags": [],
	"description": "",
	"content": " \u0026lsquo;background-size\u0026rsquo; property  Used to set the size of the element\u0026rsquo;s background image\n The image can be left to its natural size, stretched, or constrained to fit the available space\n  values  contain\n Scales the image as large as possible without cropping or stretching the image.  cover\n Scales the image as large as possible without stretching the image. If the proportions of the image differ from the element, it is cropped either vertically or horizontally so that no empty space remains.  auto\n Scales the background image in the corresponding direction such that its intrinsic proportions are maintained.  length\n Stretches the image in the corresponding dimension to the specified length.\n Accepts an integer (number); negative values are not allowed.\n  percentage\n Stretches the image in the corresponding dimension to the specified percentage of the background positioning area   Live Example\nJS Bin on jsbin.com\n"
},
{
	"uri": "/09-intro-to-programming/class-exercise-smart-thermostat-pseudocode/",
	"title": "Class Exercise - Smart Thermostat Pseudocode",
	"tags": [],
	"description": "",
	"content": " Class Exercise: Thermostat logic in pseudocode We\u0026rsquo;re going to use pseudocode to describe the basic functionality of a smart thermostat\n As as class we are going to write some pseudocode for a program for a smart thermostat\n We’ll focus on coming up with the logic that will help the thermostat know when to turn the heat on and off\n  "
},
{
	"uri": "/final-projects/milestones-due-dates/create-github-repository-for-final-project/",
	"title": "Create Github Repository for Final Project",
	"tags": [],
	"description": "",
	"content": " Milestone III: Create Github Repository for Final Project  Create a github repository for your final project, clone the project down to your \u0026lsquo;github\u0026rsquo; folder on your laptop\n Submit a link to your final project\u0026rsquo;s github repository\n Here\u0026rsquo;s an example of what link should look like: https://github.com/kareemgrant/kg-awesome-game  Due Date: Wednesday, April 24th\n Deliverable: Use this form to submit your repository url\n  Do not include spaces in your github repository names\n - **Deliverable**: Submit a link to your github repo here -- "
},
{
	"uri": "/11-javascript-fundamentals/data-types/",
	"title": "Data Types",
	"tags": [],
	"description": "",
	"content": " Strings\n Numbers\n Booleans\n Arrays\n Objects\n  "
},
{
	"uri": "/course-materials/code-demos/fancy-filtering-sorting/",
	"title": "Fancy Filtering &amp; Sorting with MixitUp",
	"tags": [],
	"description": "",
	"content": " Overview MixItUp is a Javascript plugin that makes it easy to adding visually appealing filter and sorting to your projects.\nDemo Application Summary This application uses MixItUp to create a Greek Mythology Flash card application.\ndownload Greek Mythology Flash Cards\n"
},
{
	"uri": "/08-css-positioning-and-colors/css-positioning/fixed-positioning/",
	"title": "Fixed Positioning",
	"tags": [],
	"description": "",
	"content": " Fixed Positioning  Positions the element in relation to the browser window (not its containing element)\n Fixed positioned element stays in place even if user scrolls down the page\n Box offset properties (top or bottom and left or right) specify where the element should appear in relation to browser window\n Fixed positioning commonly used to create a fixed navbar\n  .navbar { position: fixed; }  A fixed position element is positioned relative to the viewport, or the browser window itself. The viewport doesn\u0026rsquo;t change when the window is scrolled.\n Live Example\nFixed Positioning Example on jsbin.com\nThe div.navbar element above is set to position: fixed and will be positioned relative to the viewport (screen). Because fixed positioned elements stay in place, you can create a persisted (or fixed) navigation containing element as seen in the example above.\n"
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-items-properties/flex-basis/",
	"title": "Flex Basis",
	"tags": [],
	"description": "",
	"content": " flex-basis  Controls the initial size of an element, before it is manipulated by other Flexbox properties\n It can be a length (e.g. pixels, percentages, etc) or auto\n Values for flex-basis will take precedent over the values of width or height (in the case of flex-direction: column)\n  .item { flex-basis: \u0026lt;length\u0026gt; | auto; /* default auto */ }  "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-container-properties/flex-wrap/",
	"title": "Flex Wrap",
	"tags": [],
	"description": "",
	"content": " flex-wrap allows developers to change that and allow the items to wrap as needed with this property  By default, flex items will all try to fit onto one line\n .container { flex-wrap: nowrap | wrap | wrap-reverse; }  Live Example\nJS Bin on jsbin.com\n"
},
{
	"uri": "/07-page-layout-flexbox/flexbox/",
	"title": "Flexbox",
	"tags": [],
	"description": "",
	"content": " What is Flexbox?  New layout mode introduced with CSS3\n Allows developers to create flexible layouts without having to rely on floats or inline-block elements\n Is direction-agnostic as opposed to the regular layouts (block which is vertically-based and inline which is horizontally-based)\n Widely supported across all modern browsers\n  See the full list of layout modes here\n What problems does Flexbox solve?  Vertically centering a block of content inside its parent\n Making all the children of a container take up an equal amount of the available width/height, regardless of how much width/height is available\n Making all columns in a multiple column layout adopt the same height even if they contain a different amount of content\n  "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flexbox-tips/",
	"title": "Flexbox Tips",
	"tags": [],
	"description": "",
	"content": " Flexbox Tips  Use wireframes to plan out all of your flex containers\n Identify which flex containers will have a row direction and which will have a column direction?\n Identify where you will have nested flex containers (i.e. containers in containers)\n  Keep is simple, use divs for all of your flex containers\n Technically any element can be used as a flex  Use classes to name your flex containers\n Use a consistent naming convention to identify your flexbox container classes\n For example, in this class we will have all flex container class names end with \u0026ldquo;-container\u0026rdquo; for example (.main-container) to easily help you distinguish between containers and other elements.\n  Use the \u0026ldquo;guideline\u0026rdquo; css style (provided at the top of your css files) to help you visually identify your containers\n Take small steps, constantly check the results of each change in your browser (i.e. do not add a bunch of styles and then only periodically check the results in the browser - this is a sure way to get lost)\n  "
},
{
	"uri": "/homework-assignments/assignments/hw-03-jquery-traffic-light/",
	"title": "HW #3 - jQuery Traffic Light",
	"tags": [],
	"description": "",
	"content": " Homework #3: jQuery Traffic Light Use jQuery to make the Traffic Light application fully functional\nPlease refer to the Homework Submission Github Workflow guide for detailed instructions for starting, completing and submitting Homework Assignments\n Directions:  Review the assignment here\n Fork the following repository: fewd20190715/hw-03-jquery-traffic-light\n Clone the assignment repository down to your computer\n Work on your assignment and regularly commit your work\n Submit your assignment using a Pull Request\n  "
},
{
	"uri": "/homework-assignments/assignments/hw-04-citipix/",
	"title": "HW #4 - Citipix",
	"tags": [],
	"description": "",
	"content": " Homework #4: Citipix Use Javascript \u0026amp; jQuery to create an interactive web application\nPlease refer to the Homework Submission Github Workflow guide for detailed instructions for starting, completing and submitting Homework Assignments\n Directions:  Review the assignment here\n Fork the following repository: fewd20190715/hw-04-citipix\n Clone the assignment repository down to your computer\n Work on your assignment and regularly commit your work\n Submit your assignment using a Pull Request\n  "
},
{
	"uri": "/15-responsive-design/responsive-design-overview/how-to-implement/",
	"title": "Implementing Responsive Design",
	"tags": [],
	"description": "",
	"content": " Implementing Responsive Design  Add Viewport Meta Tag to your  tag\n Use Media Queries\n Leverage relative measurement approaches (EMs/REMs or Percentages) instead of pixels\n  "
},
{
	"uri": "/06-css-box-model/lab-fashion-blog/",
	"title": "Lab - Fashion Blog",
	"tags": [],
	"description": "",
	"content": " Lab: Fashion Blog  Work in teams to finish the fictional developer\u0026rsquo;s site by building out their portfolio page (depicted in the image below)\n Timebox: 40 mins\n   Using Atom, open the folder called fashion_blog in your lesson_06_files folder. You will be using these files as starting off point.\n Before you start building: Draw a wireframe of the layout to help you plan your approach\n  "
},
{
	"uri": "/14-javascript-lab/milestone-1/",
	"title": "Lab Milestone #1",
	"tags": [],
	"description": "",
	"content": "Follow the steps below to complete Milestone #1:\nIn groups of three or four students:\n Document the requirements of the proposed application\n User stories are a good way to document requirements, learn more here  Write the pseudo code for the application\n  Time box: 20 minutes\n"
},
{
	"uri": "/16-responsive-design-lab/milestone-2/",
	"title": "Milestone #2",
	"tags": [],
	"description": "",
	"content": "Follow the steps below to complete Milestone #2:\nIn pairs (or groups):\n Add the the required media query / breakpoint that optimize the content to be viewable on screens that have a viewport of 768px or below.\n Use your wireframes created from Milestone #1 to help guide you as you add the styles necessary make viewing the landing page on tablets or below an optimal experience\n  Time box: 45 minutes\nNote: While you will be working with a partner, each student should have their own copy of the project on their computers\n"
},
{
	"uri": "/11-javascript-fundamentals/variables/naming-rules/",
	"title": "Naming Rules for Variables",
	"tags": [],
	"description": "",
	"content": " Naming Rules for Variables    Do Don\u0026rsquo;t     Use variable names that start with a letter, $, or _ Use variable names that start with a number   Use variable names that include letters, numbers, $ or _ Create variable names that include a \u0026ldquo;-\u0026rdquo;, \u0026ldquo;.\u0026rdquo; or space   Use \u0026ldquo;lower camel case\u0026rdquo; when creating variable names made up of more than one word, for example: firstName Create variable names that use reserved Javascript keywords such as let, var, function or switch    Variables names should describe the kind of information the variable stores\n Here\u0026rsquo;s a list of Javascript\u0026rsquo;s reserved keywords\n "
},
{
	"uri": "/11-javascript-fundamentals/data-types/objects/",
	"title": "Objects",
	"tags": [],
	"description": "",
	"content": " Objects  Objects are used to represent real world objects in programming\n Within an object, variables are known as properties and functions are known as methods\n Curly braces are a means of identifying if a variable is an object\n  // create an object that represents a dog let myDog = { name: \u0026quot;Fido\u0026quot;, age: 4, speak: function() { console.log('Woof woof'); } }   In the example above, we created an object and stored it in a variable called myDog\n This object has two (2) properties (name and age) and 1 method (speak)\n  Accessing Properties and Methods of Objects  Properties and values can be assigned and read using Dot notation  let myDog = { name: \u0026quot;Fido\u0026quot;, age: 4, speak: function() { console.log('Woof woof'); } } // store myDog's name in a variable called dogName let dogName = myDog.name; // call the speak method of myDog myDog.speak();  JS Bin on jsbin.com\nUpdating Object properties using dot notation  Object properties can be updated, added or deleted  JS Bin on jsbin.com\nThink of methods as actions that our objects can take. Objects are another flexible and powerful feature of Javascript. Click here for more information about Objects\n "
},
{
	"uri": "/08-css-positioning-and-colors/css-colors/rgba/",
	"title": "RGBa",
	"tags": [],
	"description": "",
	"content": " RGBa  Leverages CSS3 inclusion of the opacity property Just like RGB but allows you to specify the opacity as the fourth value (alpha value) alpha must be a number between 0.0 and 1.0 (0.5 means 50% opacity)  h1 { color: rgba(102, 205, 170, 0.25); }  "
},
{
	"uri": "/17-forms/form-elements/radio-button/",
	"title": "Radio Button",
	"tags": [],
	"description": "",
	"content": " Radio Button \u0026lt;form action=\u0026quot;http://www.example.com/profile.php\u0026quot;\u0026gt; \u0026lt;p\u0026gt;Please select your favorite sport: \u0026lt;br /\u0026gt; \u0026lt;input type=\u0026quot;radio\u0026quot; name=\u0026quot;sport\u0026quot; value=\u0026quot;football\u0026quot; checked=\u0026quot;checked\u0026quot; /\u0026gt; Football \u0026lt;input type=\u0026quot;radio\u0026quot; name=\u0026quot;sport\u0026quot; value=\u0026quot;soccer\u0026quot; /\u0026gt; Soccer \u0026lt;input type=\u0026quot;radio\u0026quot; name=\u0026quot;sport\u0026quot; value=\u0026quot;basketball\u0026quot; /\u0026gt; Basketball \u0026lt;/p\u0026gt; \u0026lt;/form\u0026gt;  Radio Button Example Radio Button Attributes  type=\u0026ldquo;radio\u0026rdquo;: Allows users to pick just one of the number of options name: Identifies which form control that data came from (radio buttons in the same group share the same name attribute) value: Indicates the value that is sent to the server for the selected option checked: Used to indicate which value (if any) should be selected when the page loads  Once a radio button is selected it cannot be deselected\n"
},
{
	"uri": "/15-responsive-design/media-queries/recommended-breakpoints/",
	"title": "Recommended Breakpoints",
	"tags": [],
	"description": "",
	"content": " If you are starting a responsive design project from scratch This approach assumes you are starting a responsive design project from scratch and you will use progressive enhancement (also referred to a \u0026ldquo;mobile first\u0026rdquo;) approach\n/* main.css */ /* Extra small devices (portrait phones, less than 576px) No media query since styles outside of the media queries below will apply to everything 'up to 576px' or everything below 576px */ p { } .some-default-style { } /* Small devices (landscape phone, 576px and up) */ @media only screen and (min-width: 576px) { /* styles go here */ } /* Medium devices (tablets, 768px and up) */ @media only screen and (min-width: 768px) { /* styles go here */ } /* Large devices (desktops, 992px and up) */ @media only screen and (min-width: 992px) { /* styles go here */ } /* Extra Large devices (large desktops, 1200px and up) */ @media only screen and (min-width: 1200px) { /* styles go here */ }  If you converting a fixed layout design to a responsive layout This approach assumes that you already have an existing project that is using a fixed layout design and you want make the site responsive. The following proposed CSS file structure assumes the default styles (i.e. the styles that are not within media query) are for your widest viewport (~1200px or greater)\n/* main.css */ /* Extra Extra Large devices (large desktops, 1200px and up) * No media query since styles outside of the media queries below will apply to everything 'greater than 1200px' */ p { } .some-default-style { } /* Extra Large devices (large desktops, 1200px and down) */ @media only screen and (max-width: 1200px) { /* styles go here */ } /* Large devices (desktops, 992px and down) */ @media only screen and (max-width: 992px) { /* styles go here */ } /* Medium devices (tablets, 768px and down) */ @media only screen and (max-width: 768px) { /* styles go here */ } /* Small devices (landscape phone, 576px and down) */ @media only screen and (max-width: 576px) { /* styles go here */ }  These are good starting points but you should use your judgement and select breakpoints based on your specific design\n "
},
{
	"uri": "/15-responsive-design/responsive-images/",
	"title": "Responsive Images",
	"tags": [],
	"description": "",
	"content": " Tips for working with Images  Start with largest version of your image and use css styling to resize to desired size (more on this next class)\n Use max-width: 100% to prevent images from extending wider than its container\n  /* Apply to all images */ img { max-width: 100%; }  Example: Fixing the image container issue\nJS Bin on jsbin.com\nIn the example above, the default size of the image extends beyond the image container. An easy fix is to apply max-width: 100% globally on your stylesheet.\nUncomment the currently commented out style and observe the results.\n"
},
{
	"uri": "/15-responsive-design/relative-measurements/setting-up-font-size/",
	"title": "Setting Up Font Size for Responsive Projects",
	"tags": [],
	"description": "",
	"content": " How should we set up font size for a responsively designed project? Current best practice (subject to change) is to use the following approach in your CSS file for your responsively designed projects:\n// main.css body { // default font-size for most browsers is 16px // setting it to 100% ensures that the base size // will conform to the browser defaults font-size: 100%; } .content { // use ems or rems for all other font-sizes font-size: 1.2em; }  "
},
{
	"uri": "/13-arrays-and-loops/objects-with-arrays/",
	"title": "Using Objects with Arrays",
	"tags": [],
	"description": "",
	"content": " Objects with Arrays  Since objects are used to represent real world \u0026ldquo;things\u0026rdquo;, they are often combined with arrays to represent a collection of real world things  // declaring an array that contains objects as items let shows = [ { name: \u0026quot;Breaking Bad\u0026quot;, genre: \u0026quot;Drama\u0026quot;, network: \u0026quot;AMC\u0026quot; }, { name: \u0026quot;Game of Thrones\u0026quot;, genre: \u0026quot;Fantasy\u0026quot;, network: \u0026quot;HBO\u0026quot; }, { name: \u0026quot;Silicon Valley\u0026quot;, genre: \u0026quot;Comedy\u0026quot;, network: \u0026quot;HBO\u0026quot; }, { name: \u0026quot;Narcos\u0026quot;, genre: \u0026quot;Drama\u0026quot;, network: \u0026quot;Netflix\u0026quot; }, { name: \u0026quot;Vikings\u0026quot;, genre: \u0026quot;Action\u0026quot;, network: \u0026quot;History Channel\u0026quot; }, { name: \u0026quot;Power\u0026quot;, genre: \u0026quot;Drama\u0026quot;, network: \u0026quot;Starz\u0026quot; }, ];   In the code example above, we have an array called shows that contains a collection of objects that represents some TV shows  Looping (iteration) through an array of objects  Looping through an array of objects is technically the same as looping through an array of any other datatype (i.e. strings, numbers, etc)  JS Bin on jsbin.com\nThis example uses html tables. Documentation for tables can be found here\n "
},
{
	"uri": "/21-class-resources/atom-themes/",
	"title": "Working with Visual Studio CodeThemes",
	"tags": [],
	"description": "",
	"content": " Changing Themes Visual Studio Codeallows you to easily switch between your installed themes by doing the following:\n Opening Visual Studio CodeSettings (mac: cmd + , | pc: ctrl + ,) Select Themes in the left-hand menu Select the dropdown menu labeled Syntax Themes Choose one of the installed themes listed in the dropdown menu  Visual Studio Codecomes pre-installed with a set of themes. See that section below to add new themes to Atom\n Installing New Themes Visual Studio Codeallows you to install themes created by developers who participate in Atom\u0026rsquo;s vibrant community. Visual Studio Codehas a dedication section on their official site for the discovery of these themes (Atom Themes)\nHere are steps involved in adding a new Visual Studio Codetheme:\n Visit https://code.visualstudio.com/docs/getstarted/themes. Find a theme that you\u0026rsquo;d like to install Press the install button on the theme\u0026rsquo;s page An alert will be displayed asking you if you would like to open VS Code - select the option labeled Open Visual Studio CodeWhile in Visual Studio CodeSettings, press the button labeled Install to install the new theme Select Themes in the left-hand menu of Visual Studio CodeSettings Select the dropdown menu labeled Syntax Themes Select the newly installed theme from the dropdown menu to apply the new theme to Visual Studio Code Here\u0026rsquo;s an example of the installation of an Visual Studio Codetheme named Visual Studio CodeMaterial\n"
},
{
	"uri": "/10-intro-to-jquery/jquery-overview/",
	"title": "jQuery Overview",
	"tags": [],
	"description": "",
	"content": " jQuery Overview During this section we\u0026rsquo;ll cover:\n What is jQuery\n Benefits of jQuery\n How to add jQuery to your projects\n jQuery syntax using $()\n Document Ready function\n  "
},
{
	"uri": "/11-javascript-fundamentals/",
	"title": "Javscript Fundamentals",
	"tags": [],
	"description": "",
	"content": " Lesson 11 Javascript Fundamentals "
},
{
	"uri": "/15-responsive-design/rules-of-thumb/",
	"title": "Rules of Thumb",
	"tags": [],
	"description": "",
	"content": " Rules of Thumb for Responsive Design The following is a list of sensible guidelines to following when incorporating responsive design into your projects\n When determining which breakpoints to use, always start with the recommended breakpoints and then add others on an as needed basis\n Use EMs (or REMs) to make you text size scalable\n Use Percentages or EMs/REMs for Horizontal measurements\n Consider using EMs/REMs to dynamically adjust padding if to optimize readability of your content at different widths\n Consider using relative measures for left and right margins they change in proportion to the width of the containing element\n Use pixels (absolute measurement) for height/margins/paddings if you do not want those measurements to change relative to screen size\n  These rules are not absolute but having a standard approach speeds up development\n "
},
{
	"uri": "/12-functions/",
	"title": "Functions",
	"tags": [],
	"description": "",
	"content": " Lesson 12 Functions "
},
{
	"uri": "/00-course-intro-and-tools/what-is-frontend-development/",
	"title": "What Is front-end Development?",
	"tags": [],
	"description": "",
	"content": " Overview  Front-end web development, also known as client-side development is the practice of producing HTML, CSS and JavaScript for a website or Web Application so that a user can see and interact with them directly.  What are the primary technologies associated with front-end development?  HTML\n CSS\n Javascript\n  How is front-end development differ from back-end development?  Backend development, is also known as server-side development and involves storing data on behalf of users or customers\n Example: Amazon, stores information about all it\u0026rsquo;s customers\u0026rsquo; order history in a database  Also where a company\u0026rsquo;s business logic lives\n Example: Amazon will only qualify non-prime customers for free shipping if they spend over $50  The programming languages used for back-end development includes (but is not limited to) Ruby, Python, Java, Go and Javascript (using a technology called NodeJS)\n  "
},
{
	"uri": "/11-javascript-fundamentals/arithmetic-operators/",
	"title": "Arithmetic Operators",
	"tags": [],
	"description": "",
	"content": " Arithmetic Operators  Mathematical symbol that can act on two values (or variables) and produce a result     Description Operator Example     Addition + 7 + 8   Subtraction - 34 - 12   Multiplication * 3 * 5   Division / 42 / 6   Modulus (Remainder) % 13 % 6 (returns 1, as 6 goes into 13 twice, leaving 1 as the remainder )   Exponential ** 4 ** 2 (returns 16 or 4 * 4)   Increment ++ 9++ (returns 10)   Decrement -- 37-- (returns 36)    Examples\nJS Bin on jsbin.com\n"
},
{
	"uri": "/13-arrays-and-loops/",
	"title": "Arrays and Loops",
	"tags": [],
	"description": "",
	"content": " Lesson 13 Arrays \u0026amp; Loops "
},
{
	"uri": "/17-forms/form-elements/checkbox/",
	"title": "Checkbox",
	"tags": [],
	"description": "",
	"content": " Checkbox \u0026lt;form action=\u0026quot;http://www.example.com/profile.php\u0026quot;\u0026gt; \u0026lt;p\u0026gt;Please select your favorite music service(s): \u0026lt;br /\u0026gt; \u0026lt;input type=\u0026quot;checkbox\u0026quot; name=\u0026quot;service\u0026quot; value=\u0026quot;itunes\u0026quot; /\u0026gt; iTunes \u0026lt;input type=\u0026quot;checkbox\u0026quot; name=\u0026quot;service\u0026quot; value=\u0026quot;lastfm\u0026quot; /\u0026gt; Last.fm \u0026lt;input type=\u0026quot;checkbox\u0026quot; name=\u0026quot;service\u0026quot; value=\u0026quot;spotify\u0026quot; /\u0026gt; Spotify \u0026lt;/p\u0026gt; \u0026lt;/form\u0026gt;  Checkbox Example Checkbox Attributes  type=\u0026ldquo;checkbox\u0026rdquo;: Allows users to pick one or more options name: Used by the server to identify which form control that data came from (checkboxes in the same group share the same name attribute) value: Indicates the value that is sent to the server for the selected option checked: Used to indicate which value (if any) should be selected when the page loads  "
},
{
	"uri": "/13-arrays-and-loops/code-along-arrays-exercise/",
	"title": "Code Along - Arrays Exercise",
	"tags": [],
	"description": "",
	"content": " Code Along: Arrays Exercise  Using Atom, open the folder called arrays_exercise in your lesson_13_files folder. You will be using these files as starting off point.\n Instructions\n We\u0026rsquo;ll practice working with arrays by following the instructions specified in the exercise.js file   "
},
{
	"uri": "/final-projects/milestones-due-dates/create-submit-wireframes/",
	"title": "Create &amp; Submit Wireframes",
	"tags": [],
	"description": "",
	"content": " Milestone IV: Create and Submit Wireframes  Due Date: Monday, April 29nd\n Create wireframes for each page layout (assuming you have multiple pages with different layouts) of your final project\n Instructions\n  The following assumes you have already created a github repository for your final project and cloned the project down to your \u0026lsquo;github\u0026rsquo; folder on your laptop (see Milestone II)\n  Add a new folder to your project files/folders for final project (created in Milestone II) called wireframes\n Add the digital version of your wireframe files to the newly created wireframes folder\n In Github Desktop: Commit your updates that includes the newly added wireframe files\n In Github Desktop: Push your commit to the remote repository for final project on Github.com so your changes can be reflected on Github.com\n Navigate to the repository on Github.com, open the wireframe folder (on Github.com) and copy the url (this url leads directly to your wireframes)\n Deliverable: Submit the url that leads directly to your wireframe files using this form\n  Here\u0026rsquo;s an example of what link should look like: https://github.com/kareemgrant/kg-awesome-game/tree/master/wireframes\n"
},
{
	"uri": "/07-page-layout-flexbox/exercise/",
	"title": "Exercise - Flexbox Froggy",
	"tags": [],
	"description": "",
	"content": " Exercise: Flexbox Froggy During this exercise, you\u0026rsquo;ll go through an interactive tutorial focused on learning flexbox\n Each student complete this tutorial\n Timebox: 20 mins\n  "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-container-properties/flex-flow-shorthand/",
	"title": "Flex Flow Shorthand",
	"tags": [],
	"description": "",
	"content": " Flex Flow shorthand  Allows developers to specify the flex-direction and flex-wrap properties at the same time   flex-flow: \u0026lt;‘flex-direction’\u0026gt; || \u0026lt;‘flex-wrap’\u0026gt;   //specifies flow-direction: row \u0026amp; flex-wrap: wrap flex-flow: row wrap  "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-items-properties/flex-grow/",
	"title": "Flex Grow",
	"tags": [],
	"description": "",
	"content": " flex-grow  defines the ability for a flex item to grow if necessary\n dictates what amount of the available space inside the flex container the item should take up\n a unitless measure that respresents a proportion or ratio\n flex-grow value overrides the width of the flex-item\n   .item { flex-grow: \u0026lt;number\u0026gt;; /* default 0 */ }  JS Bin on jsbin.com\nIn the example above, the 2nd flex-item (green box) has its flex-grow set to 2 while the other flex-items have their flex-grow set to 1\n"
},
{
	"uri": "/09-intro-to-programming/group-exercise-rock-paper-scissors/",
	"title": "Group Exercise - Rock, Paper, Scissors",
	"tags": [],
	"description": "",
	"content": " Group Exercise: Rock, Paper and Scissors Form groups and write pseudocode describing a game of Rock, Paper, Scissors\n"
},
{
	"uri": "/course-materials/homework-solutions/",
	"title": "Homework Solutions",
	"tags": [],
	"description": "",
	"content": " Solutions Disclaimer: These files are not meant to be viewed as the \u0026ldquo;right answer, instead view them as a way to learn how another developer approached the same problem.\n Homework #1: Online Travel Guide Solution  No solution, assignment was specific to each student  Homework #2: Relaxr Project Solution  HW #2 Solution  Homework #3: jQuery Traffic Light Solution  HW #3 Solution  Homework #4: Citipix Solution  HW #4 Solution  "
},
{
	"uri": "/14-javascript-lab/milestone-2/",
	"title": "Lab Milestone #2",
	"tags": [],
	"description": "",
	"content": "Follow the steps below to complete Milestone #2:\nIn your groups:\n Set up your projects (folder structure) Write the code that will do the following process temperature (in Celsius) input by a user and convert that temperature to Fahrenheit and Display the result on the screen  Time box: 60 minutes\nNote: While you will be working within a group, each student should have their own copy of the project on their computers\n"
},
{
	"uri": "/16-responsive-design-lab/milestone-3/",
	"title": "Milestone #3",
	"tags": [],
	"description": "",
	"content": "Follow the steps below to complete the Milestone #3:\nIn pairs (or groups):\n Implement a hamburger menu that will be displayed on narrow screens\n When the user clicks on the hamburger menu, the hidden navigation items (i.e. Developers, Designers, How It Works, Our Team) should slide down\n  Time box: 30 minutes\nHint: Review the Responsive Marketing Layout Code Along for an example of how to implement a hamburger menu\nUse the hamburger icon from Font Awesome.\n "
},
{
	"uri": "/21-class-resources/wireframes-to-html/",
	"title": "Wireframes to HTML",
	"tags": [],
	"description": "",
	"content": " Why Wireframes? Wireframes are meant to help you plan the overall structure (layout of your pages)\nSee this article for a good overview of wireframes: https://balsamiq.com/learn/resources/articles/what-are-wireframes/\nWhat happens after the wireframes? The next step after creating your wireframes is to convert the wireframes into HTML (using minimal css to create high level box containers).\nAfter that is done, you can then proceed to add your content and CSS styling.\nSee this article for a good overview of the process of going from wireframes to HTML\nhttp://bradfrost.com/blog/post/html-wireframes/\n"
},
{
	"uri": "/10-intro-to-jquery/jquery-in-action/",
	"title": "jQuery in Action",
	"tags": [],
	"description": "",
	"content": " jQuery in Action The following pages will contain live code examples of commonly used \u0026ldquo;DOM manipulation\u0026rdquo; patterns\nThis is not a exhaustive list (not possible) but will give you a high level idea of what you can do. jQuery documentation \u0026amp; google searches will help you determine if the feature you\u0026rsquo;re trying to implement is possible with jQuery\n  Selecting Elements\n Reading (getting) and writing (setting) content from/to our pages\n Adding New content to our pages\n Listening for events\n  "
},
{
	"uri": "/11-javascript-fundamentals/variables/let-vs-var/",
	"title": "let vs var",
	"tags": [],
	"description": "",
	"content": " let vs var  In recent past var was the only way to declare variables\n While var worked it a lot of confusing issues that came along with it\n let was introduced in the latest release of Javascript, ES6 to address these issues\n While var is still in use for legacy codebases, it is a recommended best practice to use let instead of var going forward\n   // declaring a variable using var var name = \u0026quot;Jen\u0026quot; // declaring a variable using let (best practice) let name = \u0026quot;Jen\u0026quot;  Click here for more information on the differences between let and var\n "
},
{
	"uri": "/14-javascript-lab/",
	"title": "Javascript Lab",
	"tags": [],
	"description": "",
	"content": " Lesson 14 Javascript Lab "
},
{
	"uri": "/15-responsive-design/",
	"title": "Responsive Design",
	"tags": [],
	"description": "",
	"content": " Lesson 15 Responsive Design "
},
{
	"uri": "/00-course-intro-and-tools/class-logistics-materials/",
	"title": "Class Logistics &amp; Materials",
	"tags": [],
	"description": "",
	"content": " Class Logistics  Class Schedule: Monday \u0026amp; Wednesdays, 6:30pm - 9:30pm, from Jul 15th through Sept 23rd\n Break: 15 minute break during the middle of class from 7:45pm to 8:00pm (subject to change depending on flow of the class, but you\u0026rsquo;ll always get a 15 min break)\n Class Materials: Most lessons will include a set of files that you\u0026rsquo;ll work with during that lesson, we\u0026rsquo;ll refer to these files as the \u0026ldquo;lesson files\u0026rdquo;\n Homework: Homework assignments will be assigned at the end of class on Wednesdays and assignments will be due the following Wednesday.\n Reading Assignment / Tutorials: Reading Assignments and Tutorials may be assigned after a class. They are usual short in nature and are meant to help increase your understanding of upcoming or past concepts. If assigned, you will be expected to complete them before the next class.\n Labs: Labs are in-class assignments completed at the end of class; they can be done completed individually or in groups.\n Code Alongs: Small projects or exercises that the instructor and the class complete together\n Exercises: Short in-class exercises that are completed either individually\n Final Project: Pick something your passionate about, only requirement will be the use of HTML, CSS and (some) Javascript\n  "
},
{
	"uri": "/01-html-basics/tag-overview/lists/",
	"title": "Lists",
	"tags": [],
	"description": "",
	"content": " Lists  3 different types of lists:\n Unordered - lists start with a bullet point by default Ordered - numbered lists Definition - set of terms along with definition of those terms (not used often)  Both unordered and ordered lists contain list items\n list items elements are the items within list, they use opening and closing tag\n list item elements are indented by default\n list items elements are always a child a list element (in this case the “unordered list” or ul element.\n   Unordered List Example of an unordered list\nJS Bin on jsbin.com\nOrdered List Example of an ordered list\nJS Bin on jsbin.com\nDefinition List Example of a definition list\nJS Bin on jsbin.com\n"
},
{
	"uri": "/10-intro-to-jquery/code-along-color-scheme-switcher-jquery/",
	"title": "Code Along - Color Scheme Switcher using jQquery",
	"tags": [],
	"description": "",
	"content": " Code Along: Color Switcher using jQuery  Using Atom, open the folder called color_scheme_switcher_jquery in your lesson_10_files folder. You will be using these files as starting off point.\n During this exercise, we\u0026rsquo;ll be doing the following:\n We\u0026rsquo;ll use jQuery (instead of native javascript) to get the color scheme switcher project working   "
},
{
	"uri": "/07-page-layout-flexbox/code-along/",
	"title": "Code Along - Layout Challenge",
	"tags": [],
	"description": "",
	"content": " Code Along: Page Layout using Flexbox  Using Atom, open the folder called layout_challenge in your lesson_07_files folder. You will be using these files as starting off point.\n As a class, we\u0026rsquo;ll use flexbox to create the following page layouts (depicted in the images below)\n  "
},
{
	"uri": "/11-javascript-fundamentals/code-along-score-keeper/",
	"title": "Code Along - Score Keeper",
	"tags": [],
	"description": "",
	"content": " Code Along: Score Keeper  Using Atom, open the folder called score_keeper in your lesson_11_files folder. You will be using these files as starting off point.\n During this exercise, we\u0026rsquo;ll be doing the following:\n We\u0026rsquo;ll use javascript to complete an application used to keep track of a game\u0026rsquo;s score   "
},
{
	"uri": "/course-materials/code-demos/",
	"title": "Code Demos &amp; Examples",
	"tags": [],
	"description": "",
	"content": " Maps with Mapbox Carousels with Slick.js Fancy Filtering \u0026amp; Sorting with MixItUp.js Working with APIs Pinterest-type grids with Masonry  "
},
{
	"uri": "/final-projects/milestones-due-dates/create-project-plan/",
	"title": "Create Project Plan",
	"tags": [],
	"description": "",
	"content": " Milestone V: Create Project Plan  Due Date: Monday, April 29th\n Work with the instructor team to break up your final project into a series of steps that you\u0026rsquo;ll turn into tasks\n Create a Trello account and and create a \u0026ldquo;board\u0026rdquo; called FEWD Final Project to track your progress towards completed these tasks\n Invite / Add Kareem and Alejandra to your board as teammates\n Create an initial list of tasks that you\u0026rsquo;ll use to help keep you on track to complete your final project on time\n  Trello is a free project management tool that uses the kanban approach to track tasks\n  Deliverable: Use this form to submit a link to your Trello board  "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-items-properties/flex-shrink/",
	"title": "Flex Shrink",
	"tags": [],
	"description": "",
	"content": " flex-shrink  defines the ability for a flex item to shrink if necessary.\n a unitless measure that respresents a proportion or ratio (similar to flex-grow)\n  "
},
{
	"uri": "/course-materials/code-demos/getting-data-from-other-services/",
	"title": "Getting Data from Other Services",
	"tags": [],
	"description": "",
	"content": " APIs APIs (Application Programming Interfaces) allow developers to work with data from other services / applications (e.g. twitter, instagram, slack)\nDemo Applications  iTunes Search API\n Giphy Search API\n  "
},
{
	"uri": "/08-css-positioning-and-colors/css-colors/hsl/",
	"title": "HSL",
	"tags": [],
	"description": "",
	"content": " HSL  Introduced with CSS3\n Provides an alternative way to express colors based on:\n Hue (expressed as an angle between 0 and 360 degrees)\n Saturation (expressed as a percentage)\n Lightness (expressed as a percentage 0% =\u0026gt; white, 50% =\u0026gt; normal \u0026amp; 100% =\u0026gt; black)\n   body { background-color: hsl(0, 0%, 78%); }  "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-container-properties/justify-content/",
	"title": "Justify Content",
	"tags": [],
	"description": "",
	"content": " justify-content  defines the alignment along the main axis\n will distribute extra free space left after all the flex items have reached their maximum size\n  .container { justify-content: flex-start | flex-end | center | space-between | space-around; }  "
},
{
	"uri": "/13-arrays-and-loops/lab-rock-paper-scissors/",
	"title": "Lab - Rock, Paper, Scissors",
	"tags": [],
	"description": "",
	"content": " Lab: Rock, Paper Scissors  Using Atom, open the folder called rock_paper_scissors in your lesson_13_files folder. You will be using these files as starting off point.\n Instructions\n Work in pairs/groups (each student should have their own copy of the app on your computers)\n Review the completed version of the app (found in folder called rock_paper_scissors_obfuscated) to understand how the app is expected to work\n Review the Javascript code (found in js/main.js) that you were provided with to help you get started\n Plan out your approach before coding (using pseudocode, whiteboarding, etc.)\n Use console.log to print out values to console to help ensure you\u0026rsquo;re on the right path\n   "
},
{
	"uri": "/14-javascript-lab/milestone-3/",
	"title": "Lab Milestone #3",
	"tags": [],
	"description": "",
	"content": "Follow the steps below to complete Milestone #3:\nIn your groups:\n Complete the application by adding logic that changes the background image to reflect the converted temperature   Example: If the converted temperature is 10 F (degrees) the background image should represent something cold\n Make the application your own - choose your own background images\n  Timebox: 20 to 30 minutes\nNote: While you will be working within a group, each student should have their own copy of the project on their computers\n"
},
{
	"uri": "/21-class-resources/running-local-server/",
	"title": "Running a Local Server",
	"tags": [],
	"description": "",
	"content": " Why Do you need to run a local server?  There are many instances where developers will want their local environment (i.e. developing on your laptop or desktop) to closely resemble a production environment (e.g. your application hosted in the cloud)\n This allows test your application in a more realistic setting.\n There are some instances where running a local server is required. Examples of this scenario includes working with 3rd party APIs such as Mapbox or Twitter.\n  How do I know if my project is running on a Local Server? An easy way to tell if your project is running on a local server is to view the address bar once your project is displayed in the browser.\n If the url for your project starts with file:/// then your project is NOT running on a local server*\n If the url for your project starts with http://localhost:\u0026lt;some number\u0026gt; then your project is running on a local server\n  Running a Local Server You\u0026rsquo;ll need to run a server on your computer in order for the application to run. Do the following to get a server running on your computer:\n Click Here for MacOS Instructions\n Click Here for Windows Instructions\n  "
},
{
	"uri": "/17-forms/form-elements/select/",
	"title": "Select",
	"tags": [],
	"description": "",
	"content": " Select \u0026lt;form action=\u0026quot;http://www.example.com/profile.php\u0026quot;\u0026gt; \u0026lt;p\u0026gt;What device do you listen to music on?\u0026lt;/p\u0026gt; \u0026lt;select name=\u0026quot;devices\u0026quot;\u0026gt; \u0026lt;option value=\u0026quot;ipod\u0026quot;\u0026gt;iPod\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026quot;radio\u0026quot;\u0026gt;Radio\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026quot;computer\u0026quot;\u0026gt;Computer\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/form\u0026gt;  Select Example Select Attributes  \u0026lt;select\u0026gt;: Creates a drop down list box\n name: Identifies which form control that data came from  \u0026lt;option\u0026gt;: Specifies the options that the user can select from\n value: Indicates the value that is sent to the server for the selected option selected: Indicates which option should be selected when the page loads   "
},
{
	"uri": "/09-intro-to-programming/what-is-javascript/",
	"title": "What is Javascript?",
	"tags": [],
	"description": "",
	"content": " What is Javascript?  programming language created in 1995 by Netscape (now Mozilla)\n It was created in 10 days\n Not the same as java\n  What does Javascript do?  Adds interactivity to your websites\n Makes web based software feel more like desktop software\n Improves user experience\n  Why teach javascript in front-end web development?  Javascript is the only programming language that all web browsers understand  "
},
{
	"uri": "/11-javascript-fundamentals/variables/const/",
	"title": "const",
	"tags": [],
	"description": "",
	"content": " const  Stands for constant\n These are variables for which its value does not change after it has been assigned an initial value\n This help make your code easier to debug and protects certain values from accidentally being overridden in your codebase\n  Declaring a constant const are the same as let but with one key difference, values can only be assigned once to a const variable\n// declare a const named 'school' const school = \u0026quot;General Assembly\u0026quot;;  An error will occur if you try to update the value of a const\n // correctly declare a constant using \u0026quot;const\u0026quot; keyword const greeting = \u0026quot;Hello\u0026quot;; // const values cannot be updated, if you attempt to do so // an error will occur greeting = \u0026quot;Good Morning\u0026quot;; // this will throw an error  "
},
{
	"uri": "/16-responsive-design-lab/",
	"title": "Responsive Design Lab",
	"tags": [],
	"description": "",
	"content": " Lesson 16 Responsive Design Lab "
},
{
	"uri": "/00-course-intro-and-tools/tools/",
	"title": "Course Tools",
	"tags": [],
	"description": "",
	"content": " Text Editor:\n Why?: Text editor is a program that developers use to create and edit a range of programming language files. We\u0026rsquo;ll be using Visual Studio Code, because it\u0026rsquo;s open source (free) and really good.\n Download Visual Studio Code\n  Browser:\n Why?: Google chrome is a robust browser with a variety of tools that are helpful to developers.\n Install Google Chrome\n  Github:\n Why?: Github (and Git) are tools/applications used to by developers to manage their code and work collaboratively with each other. You\u0026rsquo;ll be using Github/Git to submit our homework assignments. kj\n Create a Github Account\n Download the Github Desktop App\n  Slack:\n Why?: Is a popular chat application that we\u0026rsquo;ll be using as our primary method of communication both during and outside of class\n Join the GA NYC Part Time Students Slack Community slack channel\n You should have received an emailed invitation to join GA’s slack team\n Don’t see an invitation in your inbox? Check your spam folder - many of Slack’s invitation emails tend to end up there. Let me know if you weren’t sent an invite and we’ll get you sorted out.\n  Add yourself to the dedicated Slack Channel for our class named #fewd-3-18-19 (see instructions on how to join a Slack Channel here)\n  Wireframes:\n Why?: Wireframes are a planning tools that helps you visualize the layout and other aspects of your web projects before writing any code.\n Multiple options:\n Whimsical - free wireframing software\n Google Draw\n Pen \u0026amp; Paper\n  Example of a wireframe:\n   "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-container-properties/align-items/",
	"title": "Align Items",
	"tags": [],
	"description": "",
	"content": " Align Items  defines the default behaviour for how flex items are laid out along the cross axis on the current line  "
},
{
	"uri": "/14-javascript-lab/bonus-milestone/",
	"title": "Bonus Milestone",
	"tags": [],
	"description": "",
	"content": "Follow the steps below to complete the Bonus Milestone:\n Add logic that also allows users to convert from Fahrenheit to Celsius (currently the application only converts from Celsius to Fahrenheit)\n Add logic that displays an error message when the user enters a non number (for example: when users enter a letter or a special character such as \u0026ldquo;#\u0026rdquo; or \u0026ldquo;$\u0026rdquo; into the text field and tries to calculate the temperature conversion)\n  "
},
{
	"uri": "/09-intro-to-programming/code-along-color-scheme-switcher/",
	"title": "Code Along - Color Scheme Switcher",
	"tags": [],
	"description": "",
	"content": " Code Along: Color Scheme Switcher  Using Atom, open the folder called color_scheme_switcher in your lesson_09_files folder. You will be using these files as starting off point.\n During this exercise, we\u0026rsquo;ll be doing the following:\n Walk through an actual javascript code step-by-step\n Introduce variables, functions, listeners\n Talk about how Javascript finding the elements to control\n Make some small changes and examine the results.\n   "
},
{
	"uri": "/11-javascript-fundamentals/comparison-operators/",
	"title": "Comparison Operators",
	"tags": [],
	"description": "",
	"content": " Comparison Operators  Compares operands (the things on either side of the operator) and returns true or false (boolean) based one the comparison     Operator Description Example (all return true)     Equal (==) Returns true if the operands are equal 3 == \u0026ldquo;3\u0026rdquo; (uhmm yes this is actually true)   Not equal (!=) Returns true if the operands are not equal. (4 + 1) != 10   Strict equal (===) Returns true if the operands are equal and of the same type (8 * 1) === 8   Strict not equal (!==) Returns true if the operands are of the same type but not equal, or are of different type 3 !== \u0026ldquo;3\u0026rdquo;   Greater than (\u0026gt;) Returns true if the left operand is greater than the right operand 10 \u0026gt; (3 * 3)   Greater than or equal (\u0026gt;=) Returns true if the left operand is greater than or equal to the right operand 10 \u0026gt;= (3 * 3) + 1   Less than (\u0026lt;) Returns true if the left operand is less than the right operand 7 \u0026lt; (3 * 3)   Less than or equal (\u0026lt;=) Returns true if the left operand is less than or equal to the right operand 18 \u0026lt;= 6 * 3    Examples\nJS Bin on jsbin.com\n"
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-items-properties/flex-shorthand/",
	"title": "Flex Shorthand",
	"tags": [],
	"description": "",
	"content": " flex shorthand  allows developers to specify a flex-item\u0026rsquo;s flex-grow, flex-shrink and flex-basis all at the same time   .item { flex: none | [ \u0026lt;'flex-grow'\u0026gt; \u0026lt;'flex-shrink'\u0026gt;? || \u0026lt;'flex-basis'\u0026gt; ] }  "
},
{
	"uri": "/17-forms/",
	"title": "Forms",
	"tags": [],
	"description": "",
	"content": " Lesson 17 Forms "
},
{
	"uri": "/08-css-positioning-and-colors/css-colors/hsla/",
	"title": "HSLa",
	"tags": [],
	"description": "",
	"content": " HSLa  Just like HSL but adds the ability to specify opacity using an alpha value\n alpha must be a number between 0.0 and 1.0 (0.5 means 50% opacity)\n  body { background-color: hsla(0, 100%, 75%, 0.5); }  "
},
{
	"uri": "/final-projects/milestones-due-dates/host-final-project-on-github-pages/",
	"title": "Host Final Project using Github Pages",
	"tags": [],
	"description": "",
	"content": " Milestone VI: Host Final Project using Github Pages Details TBD\n Due Date: Monday, May 13th  "
},
{
	"uri": "/07-page-layout-flexbox/lab/",
	"title": "Lab - Layout Challenge",
	"tags": [],
	"description": "",
	"content": " Lab: Layout Challenge  Using Atom, open the folder called layout_challenge in your lesson_07_files folder. You will be using these files as starting off point.\n Work in teams to use flexbox to recreate the remaining layouts depicted in layout_challenge/layouts.pdf file\n Before you start building:\n Draw a wireframe of the layout Identify your flex containers Idenitfy your nested flex containers  Timebox: 45 mins\n  "
},
{
	"uri": "/10-intro-to-jquery/lab-jquery-dom-selector-practice/",
	"title": "Lab - jQuery DOM Selector Practice",
	"tags": [],
	"description": "",
	"content": " Lab: jQuery DOM Selector Practice  Using Atom, open the folder called jquery_dom_selector_practice in your lesson_10_files folder. You will be using these files as starting off point.\n Instructions\n Follow the instructions specified in the exercise.js file   "
},
{
	"uri": "/course-materials/code-demos/pinterest-type-layout-masonry/",
	"title": "Pinterest-style layout with Masonry",
	"tags": [],
	"description": "",
	"content": " Overview Masonry is a Javascript plugin that makes it easy to create cascading grids that automatically resize as the viewport width resizes. This results in a UI layout similar to Pinterest.\nDemo Application Summary This application uses Masonry to create a cascading grid layout.\ndownload Masonry example\n"
},
{
	"uri": "/17-forms/form-elements/submit-button/",
	"title": "Submit Button",
	"tags": [],
	"description": "",
	"content": " Submit Button \u0026lt;form action=\u0026quot;http://www.example.com/subscribe.php\u0026quot;\u0026gt; \u0026lt;p\u0026gt;Subscribe to our email list:\u0026lt;/p\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;email\u0026quot; /\u0026gt; \u0026lt;input type=\u0026quot;submit\u0026quot; name=\u0026quot;subscribe\u0026quot; value=\u0026quot;Subscribe\u0026quot; /\u0026gt; \u0026lt;/form\u0026gt;  Submit Button Example Submit Button Attributes  type=\u0026ldquo;submit\u0026rdquo;: Submit button are used to submit a form to a server\n name: Used by the server to identify which form control that data came from\n value: Controls the text that appears on the button\n  The \u0026lt;button\u0026gt; element can also be used more info\n"
},
{
	"uri": "/18-final-projects-lab/",
	"title": "Final Projects Lab",
	"tags": [],
	"description": "",
	"content": " Lesson 18 Final Projects Lab "
},
{
	"uri": "/19-final-project-presentations/",
	"title": "Final Project Presentations",
	"tags": [],
	"description": "",
	"content": " Lesson 19 Final Project Presentations "
},
{
	"uri": "/01-html-basics/tag-overview/links/",
	"title": "Links",
	"tags": [],
	"description": "",
	"content": " Links  Links created using the \u0026lt;a\u0026gt; tag\n link tags use the href attribute (remember attributes come with a name and a value)\n The value of the href attribute is the location where the link will direct you after it has been clicked\n  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- contains information about the page --\u0026gt; \u0026lt;title\u0026gt;My page\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;a href=\u0026quot;https://www.cnn.com\u0026quot;\u0026gt; CNN \u0026lt;/a\u0026gt; \u0026lt;a href=\u0026quot;/about_us.html\u0026quot;\u0026gt;About Us\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-container-properties/align-content/",
	"title": "Align Content",
	"tags": [],
	"description": "",
	"content": " Align Content  aligns a flex container\u0026rsquo;s lines within when there is extra space in the cross-axis\n align-content only applies when there are mutiple lines of flex items\n  .container { align-content: flex-start | flex-end | center | space-between | space-around | stretch; }  Live Example\nJS Bin on jsbin.com\nIn the example above we are using align-content: center to align the 2 wrapped rows of flex-items along the center of the cross-axis\n"
},
{
	"uri": "/15-responsive-design/code-along-responsive-marketing-layout/",
	"title": "Code Along - Responsive Marketing Layout",
	"tags": [],
	"description": "",
	"content": " Code Along: Responsive Simple Marketing Layout  Using Atom, open the folder called responsive_marketing_layout_updated in your lesson_15_files folder. You will be using these files as starting off point.\n As a class, we\u0026rsquo;ll convert this layout to a responsive layout\n  "
},
{
	"uri": "/09-intro-to-programming/lab-traffic-light/",
	"title": "Lab - Traffic Light",
	"tags": [],
	"description": "",
	"content": " Lab: Traffic Light  Using Atom, open the folder called traffic_light in your lesson_09_files folder. You will be using these files as starting off point.\n DurigThe yellow button changes the bulb to purple and the green light does not work, change the code so that the traffic light works correctly.\n Instructions\n Work in pairs\n Use \u0026ldquo;pattern matching\u0026rdquo; to identify what needs to fix the broken code\n Your job is to fix this code:\n   "
},
{
	"uri": "/17-forms/form-elements/label/",
	"title": "Label",
	"tags": [],
	"description": "",
	"content": " Labels \u0026lt;form action=\u0026quot;http://www.example.com/subscribe.php\u0026quot;\u0026gt; \u0026lt;label\u0026gt;Age: \u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;age\u0026quot; /\u0026gt;\u0026lt;/label\u0026gt; \u0026lt;br/ \u0026gt; Gender: \u0026lt;input id=\u0026quot;female\u0026quot; type=\u0026quot;radio\u0026quot; name=\u0026quot;gender\u0026quot; value=\u0026quot;f\u0026quot;\u0026gt; \u0026lt;label for=\u0026quot;female\u0026quot;\u0026gt;Female\u0026lt;/label\u0026gt; \u0026lt;input id=\u0026quot;male\u0026quot; type=\u0026quot;radio\u0026quot; name=\u0026quot;gender\u0026quot; value=\u0026quot;m\u0026quot;\u0026gt; \u0026lt;label for=\u0026quot;male\u0026quot;\u0026gt;Male\u0026lt;/label\u0026gt; \u0026lt;/form\u0026gt;  Label Example Label The \u0026lt;label\u0026gt; element can be used in two ways:\n1) Wrap around both the text and form input\nor\n2) Kept separate from the form control and use the for attribute to indicate which form control it is a label for\nLabel attributes  for attribute states which form control the label belongs to\n value of the for attribute matches that of the id attribute on the form control it is labelling\n This technique using the for and id attributes can be used on any form control\n When a \u0026lt;label\u0026gt; element is used with a checkbox or radio button, users can click on either the form control or the label to select; the expanded clickable area makes the form easier to use\n  "
},
{
	"uri": "/11-javascript-fundamentals/logical-operators/",
	"title": "Logical Operators",
	"tags": [],
	"description": "",
	"content": " Logical Operators  Evaluates between two conditions/expressions and returns true or false\n with \u0026amp;\u0026amp; (Logical And) operators, both conditions have to be true in order for the whole expression to be true\n with || (Logical Or) operators, any of the condition must be true for entire expression to be true; but if all conditions are false then the entire expression is false\n     Operator Description Example (all return true)     Logical AND (\u0026amp;\u0026amp;) expr1 \u0026amp;\u0026amp; expr2 (3 \u0026gt; 1) \u0026amp;\u0026amp; \u0026ldquo;cat\u0026rdquo;.length === 3   Logical OR (||) expr1 || expr2 (4 + 1) \u0026lt; 8 |\\k    Examples\nJS Bin on jsbin.com\n"
},
{
	"uri": "/11-javascript-fundamentals/conditionals/",
	"title": "Conditionals",
	"tags": [],
	"description": "",
	"content": " What are Conditionals?  Conditionals tests whether an “expression” evaluates to true or false and then makes a decision based on the results of that test\n if statements are the most common form of conditionals\n There are two types of if statements\n (if..else) statements\n (if..else if) statements\n   (if\u0026hellip;else) statements  when evaluating between just two choices, use if/else\n These are great for “either or” situations\n You do not specify a condition for the “else” clause\n// if..else statement if (condition) { code to run if condition is true } else { code to run if the above condition is NOT true } run some other code  Sometimes you\u0026rsquo;ll find that you don\u0026rsquo;t need an else clause. These are scenarios where you\nlet brushedTeeth = false if(brushedTeeth){ alert('Great job, you brushed your teeth!'); } else { alert('Go your brush teeth man, your breath is hot right now!'); }  JS Bin on jsbin.com\n  (if\u0026hellip;else if) statements  when evaluation among more than two choices, use if/else if\n You must specify a condition on the “else if” clause\n You can use as many else if clauses as you need\n// if..else if statement if (condition) { code to run if this condition is true } else if (another condition) { code to run if this condition is true } else { code to run if NONE of the above conditions are true } run some other code  let yourGrade = 84; if (yourGrade \u0026gt;= 90) { alert(\u0026quot;Congrats your score is 90 or above, that's an A!\u0026quot;); } else if (yourGrade \u0026gt;= 80) { alert(\u0026quot;Congrats your score is 80 or above, you earned a B\u0026quot;); } else { alert(\u0026quot;Your score is less than 80, no bueno\u0026quot;); }  JS Bin on jsbin.com\n  "
},
{
	"uri": "/07-page-layout-flexbox/flexbox/flex-container-properties/flex-property-examples/",
	"title": "Flex Property Examples",
	"tags": [],
	"description": "",
	"content": "Using the jsbin below, change the following properties and observe the result:\n Change the value of flex-direction property of the .container selector to the each of the following and observe the result:\n column row-reverse column-reverse  With the flex-direction set to row, change the value of justify-content property of the .container selector to the each of the following and observe the result:\n flex-start flex-end center space-between space-around  Follow all of the steps laid out in #2 above but this time set the flex-direction set to column and observe the changes\n With the flex-direction set to row, change the value of align-items property of the .container selector to the each of the following and observe the result:\n flex-start flex-end center stretch baseline  Follow all of the steps laid out in #5 above but this time set the flex-direction set to column and observe the changes\n Spend 5 minutes changing both the values of flex-direction, justify-content and align-items and observe the result\n  JS Bin on jsbin.com\n"
},
{
	"uri": "/final-projects/milestones-due-dates/submit-final-project/",
	"title": "Submit Final Project",
	"tags": [],
	"description": "",
	"content": " Milestone VII: Submit Final Project Details TBD\n Due Date: Monday, May 20th  "
},
{
	"uri": "/00-course-intro-and-tools/folder-structure/",
	"title": "Folder Organization",
	"tags": [],
	"description": "",
	"content": " Recommended Folder Organization  Create a folder in your Documents (My Documents on Windows) folder called FEWD\n At beginning of every class, download and unzip (mac instructions | windows instructions) the \u0026ldquo;Lesson Files\u0026rdquo; for that lesson directly into your FEWD folder\n  While the lesson files will be hosted on Dropbox, you do not need to have a dropbox account to download the files.\n  As the course progresses you\u0026rsquo;ll have a neatly organized listing of all of your work that looks similar to this:  "
},
{
	"uri": "/01-html-basics/tag-overview/images/",
	"title": "Images",
	"tags": [],
	"description": "",
	"content": " Images  Images are placed in a \u0026lt;img\u0026gt;\n Empty element meaning there is no closing tag\n   \u0026lt;img src=\u0026quot;images/team_hands\u0026quot; alt=\u0026quot;a group of people touching hands in a star formation\u0026quot; title=\u0026quot;teamwork is awesome\u0026quot;\u0026gt;  Image Attributes  src - Tells browser where to find the image (may relative or absolute path)\n alt - Provides description of image for people who cannot see the image (accessibility)\n title - Used to provide additional information about the image. Most browsers will display this information in a tooltip.\n  Image File Formats  .png - Supports transparency and semi-transparency, great for logos, icons, and repeating background tiles. Almost always preferable to a gif.\n .gif - Can have basic transparency, typically a png is used instead\n .jpeg - No transparency, can be stored at different compression levels with varying amounts of \u0026ldquo;lossy-ness\u0026rdquo;, typically the best format for photos\n  Image example JS Bin on jsbin.com\n"
},
{
	"uri": "/11-javascript-fundamentals/code-along-compare-that/",
	"title": "Code Along - Compare That",
	"tags": [],
	"description": "",
	"content": " Code Along: Compare That  Using Atom, open the folder called compare_that in your lesson_11_files folder. You will be using these files as starting off point.\n During this exercise, we\u0026rsquo;ll be doing the following:\n We\u0026rsquo;ll use javascript to complete an application used to compare two numbers   "
},
{
	"uri": "/11-javascript-fundamentals/code-along-blackout/",
	"title": "Code Along - Blackout",
	"tags": [],
	"description": "",
	"content": " Code Along: Blackout  Using Atom, open the folder called blackout in your lesson_11_files folder. You will be using these files as starting off point.\n During this exercise, we\u0026rsquo;ll be doing the following:\n We\u0026rsquo;ll use javascript to complete an application imitate a light switch   "
},
{
	"uri": "/00-course-intro-and-tools/keys-to-success/",
	"title": "Keys to Success",
	"tags": [],
	"description": "",
	"content": " Do your homework: More you practice the concepts learned in class, the faster you\u0026rsquo;ll pick them up\n Don\u0026rsquo;t try to memorize anything: You\u0026rsquo;ll memorize things naturally through the act of doing things over and over again. Besides, if you don\u0026rsquo;t remember something just look it up (i.e. google).\n Work smarter not harder: In additional to looking things up, developers are really good at referencing past code that they\u0026rsquo;ve used in the past to solve problems they encounter in the present. So keep your past code organized so you easily reference it later. You don\u0026rsquo;t get points for memorizing anything, but you do get points for being resourceful and using past work to help you move a litter faster today.\n Ask Questions: Don\u0026rsquo;t be afraid to ask questions, everyone learns differently, it\u0026rsquo;s the instructor\u0026rsquo;s responsibility to ensure you grasp the concepts. Your questions helps me (your instructor) understand what\u0026rsquo;s working and what\u0026rsquo;s not.\n Change your perspective of failure: Expects things to not work. That\u0026rsquo;s where the fun part and truly where the learning begins. It\u0026rsquo;s during the troubleshooting phase where\u0026rsquo;s you\u0026rsquo;ll gained a deep understanding of concepts taught in class. If everything worked the first time, you\u0026rsquo;d never learn anything :)\n Get comfortable with the fact that there are multiple ways to do things: If I gave a 10 experienced developers a coding homework assignment chances are that I will receive 10 different approaches and they\u0026rsquo;ll all be \u0026ldquo;correct\u0026rdquo; (meaning each approach will accomplish the stated goals of the assignment). There is no 1 right answers when it comes to coding. There are \u0026ldquo;best practices\u0026rdquo; some of which we will push in this course, others best practices will be learned through continued practice. Instead of focusing on what you think may be the \u0026ldquo;best\u0026rdquo; approach, just focus on ensuring that your program / assignments is the goals or requirements (\u0026ldquo;just get it things working first\u0026rdquo;).\n Perfection is the enemy of good enough: When you go through your homework assignments and labs your # 1 goal is to \u0026ldquo;just get things working\u0026rdquo; and not to make it perfect the first time. Get things working first (no matter how janky it may seem) and only after you\u0026rsquo;ve got it working should you go through the process developers call refactoring, optimizing the code without changing the behavior (i.e. making it look nice).\n Use names that make sense: As a developer you are going to be frequently tasked with naming things. Naming things is hard, but my advice is to be as explicit as possible. You should always write your code as if someone else is going to read it and you want them to be able to quickly understand what’s going on. One of the best ways to accomplish that is to use names that highly contextual. For example, if you have a variable that is supposed to represent a person’s first name, then be as explicit as possible:\n  // very bad - you don't get points for making names super short var n = \u0026quot;Kiara\u0026quot; // ok but not great var name = \u0026quot;Kiara\u0026quot; // best - explicit, there's no doubt what this variable should represent var firstName = \u0026quot;Kiara\u0026quot;  "
},
{
	"uri": "/01-html-basics/tag-overview/tables/",
	"title": "Tables",
	"tags": [],
	"description": "",
	"content": " Tables  Tables represent data in a grid format\n Table Tags\n \u0026lt;table\u0026gt;: element used to create a table\n \u0026lt;tr\u0026gt;: table row\n \u0026lt;td\u0026gt;: table data, represents a cell in the table\n \u0026lt;th\u0026gt;: table headings used to respresent the header for a column or a row\n   Learn more about tables here\n ---- Table examples  JS Bin on jsbin.com\nJS Bin on jsbin.com\n"
},
{
	"uri": "/01-html-basics/tag-overview/block-and-inline-elements/",
	"title": "Block &amp; Inline Elements",
	"tags": [],
	"description": "",
	"content": " Block Elements  Block elements always appear on a new line in the browser window\n \u0026lt;h1\u0026gt;, \u0026lt;p\u0026gt;, \u0026lt;ul\u0026gt;, and \u0026lt;li\u0026gt; are examples of block elements\n  JS Bin on jsbin.com\nInline Elements  Inline elements will always appear to continue on the same line as their neighboring elements\n \u0026lt;a\u0026gt;, \u0026lt;img\u0026gt;, \u0026lt;b\u0026gt;, and \u0026lt;em\u0026gt; are examples of inline elements\n  JS Bin on jsbin.com\n"
},
{
	"uri": "/01-html-basics/tag-overview/divs-spans/",
	"title": "Divs &amp; Spans",
	"tags": [],
	"description": "",
	"content": " Divs  Divs allow you to group a set of elements together in one block-level box  JS Bin on jsbin.com\n Divs are mainly used to break your content up into logical sections. By doing so, you have more control of the layout and appearance of your pages.  Spans  Spans are the inline equivalent to Divs\n Spans are used to either:\n contain a section of text where there is no other suitable element to differentiate it from its surrounding text\n contain a number of inline elements\n  most common reason why people use  elements is so that they can control the appearance of the content of these elements using CSS\n  JS Bin on jsbin.com\nThis example uses classes and css, we will cover these topics later in the course\n "
},
{
	"uri": "/01-html-basics/tag-overview/other-tags/",
	"title": "Other Tags",
	"tags": [],
	"description": "",
	"content": " Many more tags There are many other tags available to developers such as:\n \u0026lt;b\u0026gt; Makes text bold\u0026lt;/b\u0026gt; \u0026lt;i\u0026gt; Italic text \u0026lt;/i\u0026gt; \u0026lt;br/\u0026gt; Used to break text within a paragraph \u0026lt;hr /\u0026gt; Used to add a horizontal line to visually break up text  JS Bin on jsbin.com\nMDN (Mozilla Developer Network) is an excellent resource for all things HTML, CSS and Javascript. For a complete list of all tags avaiable click here\n "
},
{
	"uri": "/course-materials/",
	"title": "Course Materials",
	"tags": [],
	"description": "",
	"content": " Course Materials "
},
{
	"uri": "/homework-assignments/",
	"title": "Homework Assignments",
	"tags": [],
	"description": "",
	"content": " Homework Assignments "
},
{
	"uri": "/final-projects/",
	"title": "Final Projects",
	"tags": [],
	"description": "",
	"content": " Final Projects "
},
{
	"uri": "/21-class-resources/",
	"title": "Class Resources",
	"tags": [],
	"description": "",
	"content": " Class Resources "
},
{
	"uri": "/01-html-basics/reading-assignment/",
	"title": "Reading Assignment",
	"tags": [],
	"description": "",
	"content": "View the following videos before the next class\n Video: What is Version Control (6 mins) \n Video: What is Git (8 mins)\n Video: What is Github? (4 mins)\n  Complete the following tutorial before the next class\n Tutorial: Hello World Github Tutorial  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/",
	"title": "FEWD",
	"tags": [],
	"description": "",
	"content": " FEWD - front-end Web Development "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]
