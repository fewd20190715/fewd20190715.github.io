<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Page Layout with Flexbox on FEWD</title>
    <link>/07-page-layout-flexbox/</link>
    <description>Recent content in Page Layout with Flexbox on FEWD</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Jan 2017 18:04:24 -0500</lastBuildDate>
    
	<atom:link href="/07-page-layout-flexbox/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Agenda</title>
      <link>/07-page-layout-flexbox/agenda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/07-page-layout-flexbox/agenda/</guid>
      <description> Block and Inline Elements
 Containing Elements
 Semantic Elements
 Flexbox
 Exercise: Flexbox Froggy
 Code Along: Layout Challenge
 Lab: Layout Challenge
  </description>
    </item>
    
    <item>
      <title>Block and Inline Elements</title>
      <link>/07-page-layout-flexbox/block-inline-elements/</link>
      <pubDate>Sun, 22 Jan 2017 18:05:18 -0500</pubDate>
      
      <guid>/07-page-layout-flexbox/block-inline-elements/</guid>
      <description>Block Level Elements  Always appear on a new line or row
 By default, block elements take up an entire row regardless of the width of their content
 Example block elements: &amp;lt;p&amp;gt;, &amp;lt;h1&amp;gt;, &amp;lt;div&amp;gt;
  JS Bin on jsbin.com
Full list of block level elements can be found here
 Inline Elements  Sit within a block level element and do not start on a new line</description>
    </item>
    
    <item>
      <title>Containing Elements</title>
      <link>/07-page-layout-flexbox/containing-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/07-page-layout-flexbox/containing-elements/</guid>
      <description>Containing Elements  Elements that contain groups of elements
 For example, grouping all of the elements associated with the header in a &amp;lt;div&amp;gt;
 &amp;lt;div&amp;gt; tags are commonly used as containing elements
  In example the above example, orange lines represent &amp;lt;div&amp;gt; tags
&amp;lt;div&amp;gt;  Used to group a set of elements together in one block-level box
 &amp;lt;div&amp;gt; element are block-level elements which means they will start on a new line</description>
    </item>
    
    <item>
      <title>Semantic Elements</title>
      <link>/07-page-layout-flexbox/semantic-elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/07-page-layout-flexbox/semantic-elements/</guid>
      <description>Structure using Semantic tags  Similar to &amp;lt;div&amp;gt;s, semantic tags are container elements
 HTML5 introduced semantic tags that directly communicate type of content the container element contains
 Important note: incorrect use of the tags will not result in any errors (but may be confusing for your teammates)
 There are rougly 100 semantic elements
 Above picture is just an example! This structure is not set in stone, use what makes sense for your project</description>
    </item>
    
    <item>
      <title>Exercise - Flexbox Froggy</title>
      <link>/07-page-layout-flexbox/exercise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/07-page-layout-flexbox/exercise/</guid>
      <description> Exercise: Flexbox Froggy During this exercise, you&amp;rsquo;ll go through an interactive tutorial focused on learning flexbox
 Each student complete this tutorial
 Timebox: 20 mins
  </description>
    </item>
    
    <item>
      <title>Code Along - Layout Challenge</title>
      <link>/07-page-layout-flexbox/code-along/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/07-page-layout-flexbox/code-along/</guid>
      <description> Code Along: Page Layout using Flexbox  Using Atom, open the folder called layout_challenge in your lesson_07_files folder. You will be using these files as starting off point.
 As a class, we&amp;rsquo;ll use flexbox to create the following page layouts (depicted in the images below)
  </description>
    </item>
    
    <item>
      <title>Lab - Layout Challenge</title>
      <link>/07-page-layout-flexbox/lab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/07-page-layout-flexbox/lab/</guid>
      <description> Lab: Layout Challenge  Using Atom, open the folder called layout_challenge in your lesson_07_files folder. You will be using these files as starting off point.
 Work in teams to use flexbox to recreate the remaining layouts depicted in layout_challenge/layouts.pdf file
 Before you start building:
 Draw a wireframe of the layout Identify your flex containers Idenitfy your nested flex containers  Timebox: 45 mins
  </description>
    </item>
    
  </channel>
</rss>